// -*- text -*-
/**
 * \file Geographic.doc
 * \brief Documentation for GeographicLib
 *
 * Written by Charles Karney <charles@karney.com> and licensed under the
 * LGPL.  For more information, see http://geographiclib.sourceforge.net/
 **********************************************************************/
// $Id: Geographic.doc 6829 2010-05-21 15:12:33Z karney $
/**
\mainpage Geographic library
\author <a href="http://charles.karney.info/">Charles Karney</a>
<charles@karney.com>
\version 1.2
\date 2010-05-21

\section abstract Abstract

%GeographicLib is a small set of <a href="annotated.html">C++
classes</a> for performing conversions between geographic, UTM, UPS,
MGRS, geocentric, and local cartesian coordinates, for geoid height
calculations, and for solving geodesic problems.  The emphasis is on
returning accurate results with errors close to round-off (about
5&ndash;15 nm).  In addition, various properties of the \ref
transversemercator are described and an accurate algorithm for \ref
geodesic is given.

This library is <i>not</i> a general purpose projection library; use
<a href="http://trac.osgeo.org/proj/">proj.4</a> for that.  On the other
hand, it does provide the core functionality offered by
<a href="http://earth-info.nima.mil/GandG/geotrans/">geotrans</a> and it
cures several of the defects of that package.

\section download Download

The main project page is at
-  <a href="http://sourceforge.net/projects/geographiclib">
  http://sourceforge.net/projects/geographiclib	</a>
.
The code is available for download at
- <a href="http://sourceforge.net/projects/geographiclib/files/distrib/geographiclib-1.2.tar.gz/download">
  geographiclib-1.2.tar.gz</a>
- <a href="http://sourceforge.net/projects/geographiclib/files/distrib/geographiclib-1.2.zip/download">
  geographiclib-1.2.zip</a>
.
as either a compressed tar file (tar.gz) or a zip file.  (The two archives
have identical contents.)

It is licensed under the
<a href="http://www.gnu.org/licenses/lgpl-3.0-standalone.html">LGPL</a>.
For more information, see http://geographiclib.sourceforge.net/

\section contents Contents
 - \ref intro
 - \ref start
 - \ref organization
 - \ref transversemercator
   - \ref tmvarious
   - \ref extend
   - \ref testmerc
   - \ref tmerrors
   - \ref tmseries
 - \ref geodesic
   - \ref geoddesc
   - \ref testgeod
   - \ref geoderrors
   - \ref geodseries
   - \ref geodmisc
 - \ref geocentric
 - \ref geoid
   - \ref geoidinst
   - \ref geoidformat
   - \ref geoidinterp
   - \ref geoidcache
   - \ref testgeoid
 - \ref utilities
   - \ref geoconvert
   - \ref geod
   - \ref transversemercatortest
   - \ref cartconvert
   - \ref equidistanttest
   - \ref geoideval
 - \ref old

<center>
Forward to \ref intro.
</center>

**********************************************************************/
/**
\page intro Introduction

<center>
Forward to \ref organization.  Up to \ref contents.
</center>

%GeographicLib offers a C++ interfaces to a small (but important!) set
of geographic transformations.  It grew out of a desire to improve on
the <a href="http://earth-info.nima.mil/GandG/geotrans/">geotrans</a>
package for transforming between geographic and MGRS coordinates.  At
present, %GeographicLib provides UTM, UPS, MGRS, geocentric, and local
cartesian projections, geoid heights, and classes for geodesic
calculations.

The goals of %GeographicLib are:
 - Accuracy.  In most applications the accuracy is close to round-off,
   about 5 nm.  Even though in many geographic applications 1 cm is
   considered "accurate enough", there is little penalty in providing
   much better accuracy.  If situations where a faster approximate
   algorithm is necessary, %GeographicLib offers an accurate benchmark to
   guide the development.
 - Completeness.  For each of the projections included, an attempt is
   made to provide a complete solution.  For example,
   GeographicLib::Geodesic::Inverse works for anti-podal points.
   Similarly, GeographicLib::Geocentric.Reverse will return accurate
   geodetic coordinates even for points close to the center of the
   earth.
 - C++ interface.  For the projection methods, this allows encapsulation
   of the ellipsoid parameters.
 - Emphasis on projections necessary for analysing military data.
 - Uniform treatment of UTM/UPS.  The GeographicLib::UTMUPS class treats
   UPS as zone 0.  This simplifies conversions between UTM and UPS
   coordinates, etc.
 - Well defined and stable conventions for the conversion between
   UTM/UPS to MGRS coordinates.
 - Detailed internal documentation on the algorithms.  For the most part
   %GeographicLib uses published algorithms and references are given.  If
   changes have been made (usually to improve the numerical accuracy),
   these are described in the code.

Various \ref utilities are provided with the library.  These illustrate
the use of the library and are useful in their own right.  This library
and the utilities have been tested with g++ 4.3 under Linux and with MS
Visual Studio 2005

The section \ref transversemercator documents various properties of this
projection.

The section \ref geodesic documents (still rather incompletely) the
method of solving the geodesic problem.

Undoubtedly, bugs lurk in this code and in the documentation.  Please
report any you find to <charles@karney.com>.

<center>
Forward to \ref start.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page start Getting Started

<center>
Back to \ref intro.  Forward to \ref organization.  Up to \ref contents.
</center>

The following steps will get you started with %GeographicLib:
 - Download the
   <a href="http://sourceforge.net/projects/geographiclib/files/distrib/geographiclib-1.2.tar.gz/download">
   source</a>.
 - Unpack the tar file somewhere convenient with, e.g.,
   - tar xfpvz geographiclib-1.2.tar.gz
   .
   This will create a geographiclib-1.2 directory.  (Alternatively,
   download and unpack the zip file.)
 - Change to the geographiclib-1.2 directory
   - cd geographiclib-1.2
 - Create the library and the utility programs
   - make all
   .
   The compiled utility programs are in the tools directory.
 - windows/GeographicLib-vc9.sln (resp. vc8) is MS Visual Studio 2008
   (resp. 2005) solution file which compiles the library and the utility
   programs under Windows.
 - Try out \ref geoconvert (for help, type cd tools; ./GeoConvert -h)
   - echo 33.3 44.4 | ./GeoConvert -m -p -3
   - echo 38SMB4484 | ./GeoConvert -d
 - Similarly, try out \ref geod, \ref transversemercatortest,
   \ref cartconvert, and \ref equidistanttest.
 - Read the section, \ref organization, for an overview of the library.
 - Browse the <a href="annotated.html">Class List</a> for full documentation
   on the library.
 - Read the section, \ref transversemercator, for more information on
   this projection.
 - If you use the library frequently, install it, e.g., to \$(PREFIX) =
   /usr/local with
   - make PREFIX=/usr/local install install-doc

Here's a list of some of the abbreviations used here with links to the
corresponding Wikipedia articles:
 - <a href="http://en.wikipedia.org/wiki/WGS84">
   WGS84</a>, World Geodetic System 1984.
 - <a href="http://en.wikipedia.org/wiki/Universal_Transverse_Mercator_coordinate_system">
   UTM</a>, Universal Transverse Mercator coordinate system.
 - <a href="http://en.wikipedia.org/wiki/Universal_Polar_Stereographic">
   UPS</a>, Universal Polar Stereographic coordinate system.
 - <a href="http://en.wikipedia.org/wiki/Military_grid_reference_system">
   MGRS</a>, Military Grid Reference System.
 - <a href="http://en.wikipedia.org/wiki/Geoid">
   EGM</a>, Earth Gravity Model.

<center>
Back to \ref intro.  Forward to \ref organization.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page organization Code organization

<center>
Back to \ref start.  Forward to \ref transversemercator.  Up to \ref contents.
</center>

Here is a brief description of the relationship between the various
components of %GeographicLib.

GeographicLib::TransverseMercator, GeographicLib::PolarStereographic,
and GeographicLib::LambertConformalConic provide the basic projections.
The constructors for these classes specify the ellipsoid and the forward
and reverse projections are implemented as const member functions.
TransverseMercator uses Kr&uuml;ger's series which have been extended to
sixth order in the square of the eccentricity.  PolarStereographic and
LambertConformalConic use the exact formulas for the projections (from
Snyder).

GeographicLib::TransverseMercator::UTM and
GeographicLib::PolarStereographic::UPS are const static instantiations
specific for the WGS84 ellipsoid with the UTM and UPS scale factors.
(These do \e not add the standard false eastings or false northings for
UTM and UPS.)  Similarly GeographicLib::LambertConformalConic::Mercator
is a const static instantiation of this projection for a WGS84 ellipsoid
and a standard parallel of 0 (which gives the Mercator projection).

GeographicLib::UTMUPS uses TransverseMercator::UTM and
PolarStereographic::UPS to perform the UTM and UPS
projections.  The class offers a uniform interface to UTM and UPS by
treating UPS as UTM zone 0.  This class stores no internal state and the
forward and reverse projections are provided via static member
functions.  The forward projection offers the ability to override the
standard UTM/UPS choice and the UTM zone.

GeographicLib::MGRS transforms between UTM/UPS coordinates and MGRS.
UPS coordinates are handled as UTM zone 0.  This class stores no
internal state and the forward (UTM/UPS to MGRS) and reverse (MGRS to
UTM/UPS) conversions are provided via static member functions.

GeographicLib::GeoCoords holds a single geographic location which may be
specified as latitude and longitude, UTM or UPS, or MGRS.  Member
functions are provided to convert between coordinate systems and to
provide formatted representations of them.

\ref geoconvert is a simple command line utility to provide access to
the GeoCoords class.

GeographicLib::TransverseMercatorExact is a drop in replacement for
TransverseMercator which uses the exact formulas, based on elliptic
functions, for the projection as given by Lee.  \ref
transversemercatortest is a simple command line utility to test to the
TransverseMercator and TransverseMercatorExact.

GeographicLib::Geodesic and GeographicLib::GeodesicLine perform geodesic
calculations.  The constructor for GeographicLib::Geodesic specifies the
ellipsoid and the direct and inverse calculations are implemented as
const member functions.  GeographicLib::Geocentric::WGS84 is a const
static instantiation of Geodesic specific for the WGS84 ellipsoid.  In
order to perform a series of direct geodesic calculations on a single
line, the GeographicLib::GeodesicLine class can be used.  This packages
all the information needed to specify a geodesic.  A const member
function returns the coordinates a specified distance from the starting
point.  \ref geod is a simple command line utility to perform geodesic
calculations.  GeographicLib::AzimuthalEquidistant computes the
azimuthal equidistant projection using Geodesic.
GeographicLib::CassiniSoldner computes the Cassini-Soldner projection
which is a cylindrical equidistant projection using Geodesic. \ref
equidistanttest is a simple command line utility to exercise these two
projections.

GeographicLib::Geocentric and GeographicLib::LocalCartesian convert between
geodetic and geocentric or a local cartesian system.  The constructor for
specifies the ellipsoid and the forward and reverse projections are
implemented as const member functions.  GeographicLib::Geocentric::WGS84 is a
const static instantiation of Geocentric specific for the WGS84 ellipsoid.
\ref cartconvert is a simple command line utility to provide access to
these classes.

GeographicLib::Geoid evaluates geoid heights by interpolation.  This is
provided by the operator() member function.  \ref geoideval is a simple
command line utility to provide access to this class.  This class
requires installation of data files for the various geoid models; see
\ref geoidinst for details.

GeographicLib::Constants, GeographicLib::Math, GeographicLib::DMS, and
GeographicLib::EllipticFunction are utility classes which are used
internally by the library.  One important definition is
GeographicLib::Math::real_t which is the type used for real numbers.
This allows the library to be easily switched to using floats, doubles,
or long doubles.  However all the testing has been with real_t set to
double and the library should be installed in this way.

In order to avoid name clashes, all there classes are in the
GeographicLib namespace.  The header files are included with the
GeographicLib/ directory prefix.  If compiling within the
%GeographicLib/src or %GeographicLib/tools directories, "../include"
should be included in the header search path (e.g., with -I../include).
The cpp files implementing the classes include "using namespace std;",
however, the headers files and the utility programs do not.

There's an "install" target in the Makefile which installs the library
components into \$(PREFIX)/lib, \$(PREFIX)/include/GeographicLib,
\$(PREFIX)/bin, \$(PREFIX)/share/GeographicLib/doc.  Once installed, the
library can be used by setting
  - INCLUDEPATH = \$(PREFIX)/include
  - LIBPATH = \$(PREFIX)/lib
  .
in tools/Makefile.

The low level projection classes, e.g., TransverseMercator and
PolarStereographic, do not throw exceptions.  Most of the other classes,
e.g., UTMUPS, MGRS, and GeoCoords all check their arguments and throw
std::out_of_range exceptions with a explanatory message.  See
GeoConvert.cpp for an example of how exceptions can be handled.  Geoid
is exceptional in than file errors can cause exceptions to be thrown
when evaluating the geoid at a valid location.

<center>
Back to \ref start.  Forward to \ref transversemercator.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page transversemercator Transverse Mercator Projection

<center>
Back to \ref organization.  Forward to \ref geodesic.  Up to \ref contents.
</center>

\b NOTE 1: Some of the material in this section has been included in
 - Charles F. F. Karney,
   <a href="http://arxiv.org/abs/1002.1417">
   Transverse Mercator with an accuracy of a few nanometers,</a>
   Feb. 2010,
   <a href="http://arxiv.org/abs/1002.1417">arXiv:1002.1417</a>.

\b NOTE 2: The figures in this section are relatively small in order to
allow them to be displayed quickly.  The "Fig. N" link beneath each
figure points to a PDF version of the figure.  These are in vector
format and allow the figures to be magnified to show the details more
clearly.  The numbering of the figures matches that in the paper cited
above.

The primary sources for the material presented here are:
 - J. P. Snyder,
   <a href="http://pubs.er.usgs.gov/usgspubs/pp/pp1395">Map Projections: A
   Working Manual</a>,
   USGS Professional Paper 1395 (1987), pp. 48&ndash;66.
   This contains an overview of the transverse Mercator projection (and
   many other projections). However, the approximations given for
   this projection are rather crude.  The terminology for the various
   transverse Mercator map projections is taken form J. P. Snyder,
   Flattening the Earth (Chicago Univ. Press, 1993).
 - L. Kr&uuml;ger, <a
   href="http://dx.doi.org/10.2312/GFZ.b103-krueger28"> Konforme
   Abbildung des Erdellipsoids in der Ebene</a> (Conformal mapping of
   the ellipsoidal earth to the plane), Royal Prussian Geodetic Institute,
   New Series 52, 172 pp. (1912).
   The derives the series solution for the transverse Mercator
   projection of an ellipsoid.  This gives very good accuracy and this
   method or an extension of it to higher-order provides the most accurate
   algorithms for the projection valid in some zone near the central
   meridian.  It is also of interest to see the systematic use of
   logarithms in the pre-electronic and pre-mechanical age (when
   computers were human).
 - L. P. Lee,
   Conformal Projections Based on Elliptic Functions,
   (B. V. Gutsell, Toronto, 1976), 128pp.,
   ISBN: 0919870163
   (Also appeared as:
   Monograph 16, Suppl. No. 1 to Canadian Cartographer, Vol 13).
   Part V, pp. 67&ndash;101,
   <a href="http://dx.doi.org/10.3138/X687-1574-4325-WM62">Conformal
   Projections Based On Jacobian Elliptic Functions</a>, gives closed
   form expressions for the transverse Mercator projection based on work
   by E. H. Thompson (1945).  This may be purchased for a modest sum.  Other
   useful sections are Part I, pp. 1&ndash;3 and Part II, pp. 4&ndash;14.
 .

\section tmvarious Survey of transverse Mercator projections

The following is adapted from Lee (1976) particularly pp. 92&ndash;101.
The terminology is from Snyder (1993) pp. 159&ndash;161.

The transverse Mercator projection is a conformal projection of the
ellipsoid in which the central meridian is straight.  Within these
constrains there are various projections that differ in how the scale
varies along the central meridian.  The simplest such projection from an
algorithmic point of view is the Gauss-Schreiber projection which
consists of a conformal projection from the ellipsoid to a sphere
followed by the spherical transverse Mercator projection.  This results
in a projection whose scale on the central meridian increases from the
equator to the pole (by an amount proportional to the flattening).  In
the Gauss-Kr&uuml;ger projection, the scale along the central meridian
is held constant.  This projection is usually expressed as a series
which is valid only sufficiently close to the central meridian.  (This
is implemented by GeographicLib::TransverseMercator.)  The projection
can however be expressed in closed form in terms of the Thompson
transverse Mercator projection (where the scale along the central
meridian decreases from the equator to the pole by an amount
proportional to the flattening).  (This method of computing the
Gauss-Kr&uuml;ger projection is implemented by
GeographicLib::TransverseMercatorExact.)

The graticules (lines of constant latitude and longitude) for all these
projections are shown in Figs. 1(a&ndash;c).  These figures all use an
ellipsoid with eccentricity \e e = 1/10 (inverse flattening = 10 (3
sqrt(11) + 10) = 199.5, i.e., somewhat flatter than the WGS84 ellipsoid)
and the projections have all been scaled so that the distance from the
equator to the north pole is unity.  One eighth of the ellipsoid is
shown in these figures, 0<sup>o</sup> <= latitude <= 90<sup>o</sup> and
0<sup>o</sup> <= longitude <= 90<sup>o</sup>.  To obtain the graticule
for the entire ellipsoid, reflect these figures in \e x = 0, \e y = 0,
and \e y = 1.  The blue lines show latitude and longitude at multiples
of 10<sup>o</sup>.  The green lines show 1<sup>o</sup> intervals for
longitude in [80, 90] and latitude in [0, 10].  In all three figures,
longitude = 0<sup>o</sup> lies on \e x = 0 and longitude =
90<sup>o</sup> lies on \e y = 1.

<center>
<img src="gauss-schreiber-graticule-a.png"
width=667 height=305 alt="Gauss-Schreiber transverse Mercator graticule
(scaled)">
<a href="gauss-schreiber-graticule-a.pdf">Fig. 1(a)</a>
</center>\n
The graticule for the Gauss-Schreiber transverse Mercator projection.
The equator lies on \e y = 0.
Compare this with Lee, Fig. 1 (right), which shows the graticule for
half a sphere, but note that in his notation \e x and \e y have switched
meanings.  The graticule for the ellipsoid differs from that for a
sphere only in that the latitude lines have shifted slightly.  (The
conformal transformation from an ellipsoid to a sphere merely relabels
the lines of latitude.)  This projection places the point latitude =
0<sup>o</sup>, longitude = 90<sup>o</sup> at infinity.

<center>
<img src="gauss-krueger-graticule-a.png"
width=667 height=305 alt="Gauss-Krueger transverse Mercator graticule
(scaled)">
<a href="gauss-krueger-graticule-a.pdf">Fig. 1(b)</a>
</center>\n
The graticule for the Gauss-Kr&uuml;ger transverse Mercator projection.
The equator lies on \e y = 0 for longitude < 81<sup>o</sup>; beyond
this, it arcs up to meet \e y = 1.  Compare this with Lee, Fig. 45
(upper), which shows the graticule for the International Ellipsoid.  Lee,
Fig. 46, shows the graticule for the entire ellipsoid.  This projection
(like the Thompson projection) projects the ellipsoid to a finite area.

<center>
<img src="thompson-tm-graticule-a.png"
width=667 height=305 alt="Thompson transverse Mercator graticule
(scaled)">
<a href="thompson-tm-graticule-a.pdf">Fig. 1(c)</a>
</center>\n
The graticule for the Thompson transverse Mercator projection.  The
equator lies on \e y = 0 for longitude < 81<sup>o</sup>; at longitude =
81<sup>o</sup>, it turns by 120<sup>o</sup> and heads for \e y = 1.
Compare this with Lee, Fig. 43, which shows the graticule for the
International Ellipsoid.  Lee, Fig. 44, shows the graticule for the
entire ellipsoid.  This projection (like the Gauss-Kr&uuml;ger
projection) projects the ellipsoid to a finite area.

Of the three transverse Mercator projections given here the
Gauss-Kr&uuml;ger projection is by far the most important.  It is the
basis of the UTM system.  If "transverse Mercator projection" is used
without further elaboration, then, nearly always, it refers to
the Gauss-Kr&uuml;ger projection.

\section extend Properties far from the central meridian

The divergent behavior of the Gauss-Schreiber projection as latitude =
0<sup>o</sup>, longitude = 90<sup>o</sup> is approached is unsurprising
given the behavior of the standard Mercator projection at the poles.  On
the other hand, the lack of divergence in the Gauss-Kr&uuml;ger
projection (and similarly in the Thompson projection) is perhaps
puzzling.  We explore the behavior more carefully in this section.

Firstly, the Gauss-Kr&uuml;ger projection \e does have a singularity at
latitude = 0<sup>o</sup> and longitude = 90<sup>o</sup>(1 - \e e), where
\e e is the eccentricity of the ellipsoid.  The choice of \e e = 1/10
for Figs. 1&ndash;3 was made to ensure that one of the graticule lines
(longitude = 81<sup>o</sup>) covered this singularly.  The singularly is
relatively benign.  The Thompson projection contains a cube root
singularity with causes the corner in the equator.  The transformation
from Thompson to Gauss-Kr&uuml;ger "repairs" this to lowest order so
that there's no kink in the equation.  Nevertheless, a weaker
singularity remains (causing a discontinuous change in the radius of
curvature for the equator).  Thus Gauss-Kr&uuml;ger has a branch point
at latitude = 0<sup>o</sup> and longitude = 90<sup>o</sup>(1 - \e e) and
the projection is analytic provided this point is avoided.  However the
results obtained for the projection will depend on which sheet of the
projection is used or which route around the branch point is taken.

The "standard" convention for projecting a geographic position is to
follow the central meridian from the equator to the target latitude,
then to follow the line of constant latitude to the target longitude.
This is equivalent to placing two branch cuts on the equator in the
longitude ranges +/- [90<sup>o</sup>(1 - \e e), 90<sup>o</sup>(1 + \e
e)].  For points on equator for |longitude| > 90<sup>o</sup>(1 - \e e),
the path should go to the north of branch point.  This convention
corresponds to Fig. 1(b), above, after suitable reflections to cover the
ellipsoid and to Lee, Fig. 46.

In order to explore the behavior to the right of the equator in Fig. 1(b),
we define an "extended" domain for the projection, this consists of the
union of
 - 0<sup>o</sup> <= latitude <= 90<sup>o</sup> and
   0<sup>o</sup> <= longitude <= 90<sup>o</sup>
 - -90<sup>o</sup> < latitude <= 0<sup>o</sup> and
   90<sup>o</sup>(1 - \e e) <= longitude <= 90<sup>o</sup>
 .
The rule for reaching the second area here is to move on the central
meridian to a small positive latitude, move at constant latitude to the
target longitude and then to move on a meridian to the target latitude.
In this case, the branch cut emanates in a south-westerly direction from
the branch point.  Following this prescription the range of the
projection now consists of the union of
 - 0 <= \e x and
   0 <= \e y/(\e k<sub>0</sub> \e a) <= E(\e e<sup>2</sup>)
 - K(1 - \e e<sup>2</sup>) - E(1 - \e e<sup>2</sup>)
   <= \e x/(\e k<sub>0</sub> \e a) and \e y <= 0
 .
where \e k<sub>0</sub> is the central scale factor, \e a is the major
radius of the ellipsoid, K and E are complete elliptic integrals.
Setting the optional argument \e extendp = true in the constructor for
GeographicLib::TransverseMercatorExact provides access to this extended
domain.

Figures 4&ndash;5 illustrate the properties of the Gauss-Kr&uuml;ger
transverse Mercator projection in this extended domain.  These figures
use an ellipsoid with eccentricity 1/10 (as in Figs. 1&ndash;3) and with
\e a = 1/E(0.01) = 0.6382 and \e k<sub>0</sub> = 1.  The branch point in
this case lies at lat = 0<sup>o</sup>, lon = 81<sup>o</sup> or \e x =
(K(0.99) - E(0.99))/E(0.01) = 1.71, \e y = 0.

<center>
<img src="gauss-krueger-graticule.png"
width=673 height=323 alt="Gauss-Krueger transverse Mercator
graticule">\n
<a href="gauss-krueger-graticule.pdf">Fig. 3(a)</a>
</center>
Figure 4 shows the graticule the extended domain.  The blue lines show
latitude and longitude at multiples of 10<sup>o</sup>.  The green lines
show 1<sup>o</sup> intervals for longitude in [80, 90] and latitude in
[-5, 10].

<center>
<img src="gauss-krueger-convergence-scale.png"
width=673 height=323 alt="Gauss-Krueger transverse Mercator
convergence and scale">
<a href="gauss-krueger-convergence-scale.pdf">Fig. 3(b)</a>
</center>\n
Figure 5 shows the convergence and scale for the Gauss-Kr&uuml;ger
transverse Mercator projection in the extended domain.  The blue lines
emanating from the top left corner (the north pole) are lines of
constant convergence.  Convergence = 0<sup>o</sup> is given by the
dog-legged line joining the points (0,1), (0,0), (1.71,0), (1.71,-inf).
Convergence = 90<sup>o</sup> is given by the line y = 1.  The other
lines show multiples of 10<sup>o</sup> between 0<sup>o</sup> and
90<sup>o</sup>.  The other blue, the green and the black lines show
scale = 1 thru 2 at intervals of 0.1, 2 thru 15 at intervals of 1, and
15 thru 35 at intervals of 5.  Multiples of 5 are shown in black,
multiples of 1 are shown in blue, and the rest are shown in green.
Scale = 1 is given by the line segment (0,0) to (0,1).  The red line
shows the equator between lon = 81<sup>o</sup> and 90<sup>o</sup>.  The
scale and convergence at the branch point are 1/\e e = 10 and
0<sup>o</sup>, respectively.

Symmetries in the projection can now be employed to extend the
Gauss-Kr&uuml;ger transverse Mercator projection with arbitrary rules
for how to circumvent the branch point.  The symmetries are equivalent
to placing mirrors on the lines segments
 - 0 <= \e x, \e y = 1
 - \e x = 0, 0 <= \e y <= 1
 - 0 <= \e x <= 1.71, \e y = 0
 - \e x = 1.71, \e y <= 0

In order to understand the projection better, it is instructive to
examine the Thompson projection in the extended domain.
<center>
<img src="thompson-tm-graticule.png"
width=661 height=321 alt="Thompson transverse Mercator graticule">
<a href="thompson-tm-graticule.pdf">Fig. 3(c)</a>
</center>\n
Figure 6 shows the graticule for the Thompson transverse Mercator
projection for the extended domain.  The range of the projection is the
rectangular region shown
 - 0 <= \e u <= K(\e e<sup>2</sup>),
   0 <= \e v <= K(1 - \e e<sup>2</sup>)
 .
The coloring of the lines is the same as Fig. 3(a), except that latitude
lines extended down to -10<sup>o</sup> and a red line has been added
showing the line \e y = 0 for \e x > 1.71 in the Gauss-Kr&uuml;ger
projection (Fig. 3(a)).  The extended Thompson projection figure has
reflection symmetry on all the four sides of Fig. 3(c).

In transforming from Thompson to Gauss-Kr&uuml;ger, the right angle at
lower right corner of Fig. 3(c) expands by 3 to 270<sup>o</sup> to produce
the outside corner at \e x = 1.71 and \e y = 0 in Fig. 3(a).  The top right
corner of Fig. 3(c) represents the south pole and this is transformed to
infinity in the extended Gauss-Kr&uuml;ger projection.  Despite the
apparent similarities, the behaviors of the extended Thompson projection
near the north and south poles (top left and top right corners in
Fig. 3(c)) are rather different.  The singularity for the north pole is
merely the result of the singularity of a polar coordinate system (e.g.,
longitude is undefined at the north pole).  Encircling the north pole,
causes longitude to increase by 360<sup>o</sup>, as expected.  On the
other hand, encircling the south pole increases the longitude by
360<sup>o</sup> \e e = 36<sup>o</sup>.  The same behavior is exhibited
by the extended Gauss-Kr&uuml;ger projection.  The point latitude =
-1<sup>o</sup>, longitude = 90<sup>o</sup> projects to a point [2.65,1]
in Fig. 3(a).  If we now travel along this latitude line to longitude =
54<sup>o</sup> = 90<sup>o</sup> - 36<sup>o</sup> we arrive back at the
same projected position.  In the extended domain, the Thompson and the
Gauss-Kr&uuml;ger projections are not tightly tied to the globe but can
slip around it longitudinally.

\section testmerc Test data for the transverse Mercator projection

A test set for the transverse Mercator projection is available at
 - <a href="http://sourceforge.net/projects/geographiclib/files/testdata/TMcoords.dat.gz/download">
   TMcoords.dat.gz</a>
 .
This is about 17 MB (compressed).  This test set consists of a set of
geographic coordinates together with the corresponding transverse
Mercator coordinates.  The WGS84 ellipsoid is used, with central
meridian 0<sup>o</sup>, central scale factor 0.9996 (the UTM value),
false easting = false northing = 0 m.

Each line of the test set gives 6 space delimited numbers
 - latitude (degrees, exact)
 - longitude (degrees, exact &mdash; see below)
 - easting (meters, accurate to 0.1 pm)
 - northing (meters, accurate to 0.1 pm)
 - meridian convergence (degrees, accurate to 10<sup>-18</sup> deg)
 - scale (accurate to 10<sup>-20</sup>)
 .
The latitude and longitude are all multiples of 10<sup>-12</sup> deg and
should be regarded as exact, except that longitude =
82.63627282416406551 should be interpreted as exactly 90 (1 - \e e)
degrees.  These results are computed using Lee's formulas with
<a href="http://en.wikipedia.org/wiki/Maxima_(software)">Maxima</a>'s
bfloats and fpprec set to 80 (so the errors in the data are probably 1/2
of the values quoted above).  The Maxima code,
<a href="tm.mac">tm.mac</a> and <a href="ellint.mac">ellint.mac</a>,
used to prepare this data set is included in the distribution.  You will
need to have Maxima installed to use this code.  The comments at the top
of <a href="tm.mac">tm.mac</a> illustrate how to run it.

The contents of the file are as follows:
 - 250000 entries randomly distributed in lat in [0, 90], lon in [0, 90];
 - 1000 entries randomly distributed on lat in [0, 90], lon = 0;
 - 1000 entries randomly distributed on lat = 0, lon in [0, 90];
 - 1000 entries randomly distributed on lat in [0, 90], lon = 90;
 - 1000 entries close to lat = 90 with lon in [0, 90];
 - 1000 entries close to lat = 0, lon = 0 with lat >= 0, lon >= 0;
 - 1000 entries close to lat = 0, lon = 90 with lat >= 0, lon <= 90;
 - 2000 entries close to lat = 0, lon = 90 (1 - \e e) with lat >= 0;
 - 25000 entries randomly distributed in lat
   in [-89, 0], lon in [90 (1 - \e e), 90];
 - 1000 entries randomly distributed on lat in [-89, 0], lon = 90;
 - 1000 entries randomly distributed on lat in [-89, 0], lon = 90 (1 - \e e);
 - 1000 entries close to lat = 0, lon = 90 (lat < 0, lon <= 90);
 - 1000 entries close to lat = 0, lon = 90 (1 - \e e)
   (lat < 0, lon <= 90 (1 - \e e));
 .
(a total of 287000 entries).  The entries for lat < 0<sup>o</sup> and
lon in [90<sup>o</sup> (1 - \e e), 90<sup>o</sup>] use the "extended"
domain for the transverse Mercator projection explained in \ref extend.
The first 258000 entries have lat >= 0<sup>o</sup> and are suitable for
testing implementations following the standard convention.

The errors in the forward and reverse projections are converted into a
ground distance (e.g., by dividing the error in the projection by the
scale factor).  The errors in the convergence and in the scale may be
large because these quantities vary rapidly near singular points (for
convergence at the lat = 90<sup>o</sup> and for both convergence and
scale at lat = 0<sup>o</sup>, lon = 90<sup>o</sup> (1 - \e e)).  We
account for this by expressing the error as the sum of a constant and a
term proportional to the gradient of the quantity being measured.

\section tmerrors Accuracy of transverse Mercator projection

Errors in GeographicLib::TransverseMercatorExact.  For both Forward and
Reverse projections
 - error in position < 9 nm (5 pm for long doubles)
 .
These errors apply with the standard convention for the transverse
Mercator projection.  In this case, we use only test samples with
non-negative values of latitude.

For the extended transverse Mercator projection (Fig. 3(a)), the errors
given above apply only for latitude >= -15<sup>o</sup>.  For more negative
latitudes, the errors become large.  For example for latitude >=
-58<sup>o</sup>, the maximum error is 1 mm (and the scale has become 124
million).  This increase in the error is due to the use of the Thompson
projection in the computation.  Looking at the graticule for this
projection (Fig. 3(c)), we see that the Thompson scale becomes small close
to the south pole resulting in errors (measured as a ground distance)
which diverges (the errors vary inversely with scale).  For example at
lat = -58<sup>o</sup>, the scale for the Thompson projection is about
240000 times smaller than on the central meridian and the errors have
increased by about the same factor.  If necessary, this problem could be
avoided by reformulating the Thompson projection to place the origin at
the South pole.

If GeographicLib::TransverseMercatorExact is modified to use long
doubles (a 64-bit floating fraction) instead of of doubles (53-bit
floating fraction) then the error in the position is about 5 pm, for
latitude >= -15<sup>o</sup>.

Errors in GeographicLib::TransverseMercator.  For both Forward and
Reverse projections within 3900 km using the 6th-order series
(TM_TX_MAXPOW = 6, the default)
 - error in position < 5 nm
 .
Further from the central meridian, the errors grow rapidly.  For |\e x|
= 10700 km (approx 68<sup>o</sup> from the central median), the error in
position is about 1 mm.  When used in the UTM system, \e x is typically
restricted to |\e x| <= 500 km.  Within |\e x| <= 500 km, the errors
using the 6th-order series are dominated by round-off rather than the
number of terms.  If GeographicLib::TransverseMercator is modified to
use long double instead of double, the error in the position within the
the UTM region is about 2 pm.

If GeographicLib::TransverseMercator is compiled with TM_TX_MAXPOW = 4
to give the 4th-order approximation, then the error is about 210 nm
for |\e x| <= 500 km (the region used for UTM coordinates).

\section tmseries Series approximation for transverse Mercator

Kr&uuml;ger (1912) gives a 4th-order approximation to the transverse
Mercator projection.  The method entails performing first a
Gauss-Schreiber projection and approximating the warp of this to
Gauss-Kr&uuml;ger projection as a series in \e n = (\e a - \e b)/(\e a +
\e b).  This is accurate to about 200 nm within the UTM domain.  Here we
present the series extended to 10th order.  The series expanded to order
<i>n</i><sup>30</sup> are given in <a href="tmseries30.html">
tmseries30.html</a>.

By default, GeographicLib::TransverseMercator uses the 6th-order
approximation. The preprocessor variable TM_TX_MAXPOW can be used to
select an order from 4 thru 8.

In the formulas below ^ indicates exponentiation (\e n^3 = \e n*\e n*\e
n) and / indicates real division (3/5 = 0.6).  The equations need to be
converted to Horner form, but are here left in expanded form so that
they can be easily truncated to lower order in \e n.  Some of the
integers here are not representable as 32-bit integers and will need to
be included as double literals.

\e A in Kr&uuml;ger, p. 12, eq. (5)
\verbatim
  A = a/(n + 1) * (1 + 1/4 * n^2
                     + 1/64 * n^4
                     + 1/256 * n^6
                     + 25/16384 * n^8
                     + 49/65536 * n^10);
\endverbatim

\e gamma in Kr&uuml;ger, p. 21, eq. (41)
\verbatim
alpha[1] =   1/2 * n
           - 2/3 * n^2
           + 5/16 * n^3
           + 41/180 * n^4
           - 127/288 * n^5
           + 7891/37800 * n^6
           + 72161/387072 * n^7
           - 18975107/50803200 * n^8
           + 60193001/290304000 * n^9
           + 134592031/1026432000 * n^10;
alpha[2] =   13/48 * n^2
           - 3/5 * n^3
           + 557/1440 * n^4
           + 281/630 * n^5
           - 1983433/1935360 * n^6
           + 13769/28800 * n^7
           + 148003883/174182400 * n^8
           - 705286231/465696000 * n^9
           + 1703267974087/3218890752000 * n^10;
alpha[3] =   61/240 * n^3
           - 103/140 * n^4
           + 15061/26880 * n^5
           + 167603/181440 * n^6
           - 67102379/29030400 * n^7
           + 79682431/79833600 * n^8
           + 6304945039/2128896000 * n^9
           - 6601904925257/1307674368000 * n^10;
alpha[4] =   49561/161280 * n^4
           - 179/168 * n^5
           + 6601661/7257600 * n^6
           + 97445/49896 * n^7
           - 40176129013/7664025600 * n^8
           + 138471097/66528000 * n^9
           + 48087451385201/5230697472000 * n^10;
alpha[5] =   34729/80640 * n^5
           - 3418889/1995840 * n^6
           + 14644087/9123840 * n^7
           + 2605413599/622702080 * n^8
           - 31015475399/2583060480 * n^9
           + 5820486440369/1307674368000 * n^10;
alpha[6] =   212378941/319334400 * n^6
           - 30705481/10378368 * n^7
           + 175214326799/58118860800 * n^8
           + 870492877/96096000 * n^9
           - 1328004581729009/47823519744000 * n^10;
alpha[7] =   1522256789/1383782400 * n^7
           - 16759934899/3113510400 * n^8
           + 1315149374443/221405184000 * n^9
           + 71809987837451/3629463552000 * n^10;
alpha[8] =   1424729850961/743921418240 * n^8
           - 256783708069/25204608000 * n^9
           + 2468749292989891/203249958912000 * n^10;
alpha[9] =   21091646195357/6080126976000 * n^9
           - 67196182138355857/3379030566912000 * n^10;
alpha[10]=   77911515623232821/12014330904576000 * n^10;
\endverbatim

\e beta in Kr&uuml;ger, p. 18, eq. (26*)
\verbatim
 beta[1] =   1/2 * n
           - 2/3 * n^2
           + 37/96 * n^3
           - 1/360 * n^4
           - 81/512 * n^5
           + 96199/604800 * n^6
           - 5406467/38707200 * n^7
           + 7944359/67737600 * n^8
           - 7378753979/97542144000 * n^9
           + 25123531261/804722688000 * n^10;
 beta[2] =   1/48 * n^2
           + 1/15 * n^3
           - 437/1440 * n^4
           + 46/105 * n^5
           - 1118711/3870720 * n^6
           + 51841/1209600 * n^7
           + 24749483/348364800 * n^8
           - 115295683/1397088000 * n^9
           + 5487737251099/51502252032000 * n^10;
 beta[3] =   17/480 * n^3
           - 37/840 * n^4
           - 209/4480 * n^5
           + 5569/90720 * n^6
           + 9261899/58060800 * n^7
           - 6457463/17740800 * n^8
           + 2473691167/9289728000 * n^9
           - 852549456029/20922789888000 * n^10;
 beta[4] =   4397/161280 * n^4
           - 11/504 * n^5
           - 830251/7257600 * n^6
           + 466511/2494800 * n^7
           + 324154477/7664025600 * n^8
           - 937932223/3891888000 * n^9
           - 89112264211/5230697472000 * n^10;
 beta[5] =   4583/161280 * n^5
           - 108847/3991680 * n^6
           - 8005831/63866880 * n^7
           + 22894433/124540416 * n^8
           + 112731569449/557941063680 * n^9
           - 5391039814733/10461394944000 * n^10;
 beta[6] =   20648693/638668800 * n^6
           - 16363163/518918400 * n^7
           - 2204645983/12915302400 * n^8
           + 4543317553/18162144000 * n^9
           + 54894890298749/167382319104000 * n^10;
 beta[7] =   219941297/5535129600 * n^7
           - 497323811/12454041600 * n^8
           - 79431132943/332107776000 * n^9
           + 4346429528407/12703122432000 * n^10;
 beta[8] =   191773887257/3719607091200 * n^8
           - 17822319343/336825216000 * n^9
           - 497155444501631/1422749712384000 * n^10;
 beta[9] =   11025641854267/158083301376000 * n^9
           - 492293158444691/6758061133824000 * n^10;
 beta[10]=   7028504530429621/72085985427456000 * n^10;
\endverbatim

The following table gives the truncation error when the series above are
truncated to order \e n<sup><i>J</i></sup>.  The error is the maximum of
the errors for the forward and reverse projections, converted in both
cases to a true distance (in meters).  It is expressed as a function of
the geodesic distance (in km) from the central meridian.  This table was
computed for the WGS84 ellipsoid.  When implementing with floating point
arithmetic on a computer, there is an additional rounding error incurred;
this adds 2.2 m for floats, 4.9 nm for doubles and 2.0 pm for long
doubles.
\verbatim
dist J=2     J=4     J=5     J=6     J=7     J=8     J=10    J=12
   0 3.0e-02 1.9e-07 5.9e-10 1.7e-12 6.6e-15 2.4e-17 3.5e-22 5.6e-27
 500 3.2e-02 2.1e-07 7.3e-10 2.4e-12 9.4e-15 3.7e-17 6.6e-22 1.3e-26
1000 3.7e-02 3.1e-07 1.2e-09 4.8e-12 2.1e-14 9.8e-17 2.3e-21 5.9e-26
1500 4.7e-02 5.3e-07 2.4e-09 1.1e-11 5.8e-14 3.1e-16 9.4e-21 3.2e-25
2000 6.3e-02 1.0e-06 5.3e-09 2.9e-11 1.7e-13 1.0e-15 4.3e-20 1.9e-24
2500 8.8e-02 2.1e-06 1.2e-08 8.0e-11 5.4e-13 3.8e-15 2.1e-19 1.3e-23
3000 1.3e-01 4.5e-06 3.1e-08 2.3e-10 1.9e-12 1.5e-14 1.2e-18 9.9e-23
3500 1.9e-01 9.6e-06 8.0e-08 7.2e-10 6.8e-12 6.8e-14 7.3e-18 8.6e-22
4000 3.0e-01 2.1e-05 2.2e-07 2.4e-09 2.7e-11 3.2e-13 5.0e-17 8.6e-21
4500 4.7e-01 5.0e-05 6.2e-07 8.3e-09 1.2e-10 1.7e-12 3.9e-16 1.0e-19
5000 7.7e-01 1.3e-04 1.9e-06 3.2e-08 5.5e-10 9.9e-12 3.5e-15 1.4e-18
5500 1.3e+00 3.4e-04 6.6e-06 1.4e-07 3.0e-09 6.8e-11 3.8e-14 2.3e-17
6000 2.4e+00 1.0e-03 2.6e-05 6.8e-07 1.9e-08 5.6e-10 5.2e-13 5.3e-16
6500 4.7e+00 3.6e-03 1.2e-04 4.1e-06 1.5e-07 5.9e-09 9.6e-12 1.7e-14
7000 1.0e+01 1.5e-02 6.6e-04 3.2e-05 1.6e-06 8.7e-08 2.7e-10 9.1e-13
7500 2.5e+01 7.7e-02 5.0e-03 3.5e-04 2.6e-05 2.0e-06 1.3e-08 9.4e-11
8000 7.6e+01 5.7e-01 5.9e-02 6.5e-03 7.6e-04 9.2e-05 1.5e-06 2.6e-08
8500 3.3e+02 8.0e+00 1.5e+00 2.9e-01 5.9e-02 1.3e-02 6.3e-04 3.4e-05
9000 2.9e+03 3.9e+02 1.6e+02 7.4e+01 3.5e+01 1.7e+01 4.4e+00 1.2e+00
\endverbatim

<center>
<img src="gauss-krueger-error.png"
width=672 height=552 alt="Truncation error for Gauss-Krueger series">
<a href="gauss-krueger-error.pdf">Fig. 2</a>
</center>\n
The truncation error for the series for the Gauss-Kr&uuml;ger transverse
Mercator projection.  The blue curves show the truncation error for the
order of the series \e J = 2 (top) thru \e J = 12 (bottom).  The red
curves show the combined truncation and round-off errors for
 - float and \e J = 4 (top)
 - double and \e J = 6 (middle)
 - long double and \e J = 8 (bottom)

The high-order expansions for \e alpha and \e beta were produced by the
Maxima program <a href="tmseries.mac">tmseries.mac</a> (included in the
distribution).  To run, start Maxima and enter
\verbatim
  load("tmseries.mac")$
\endverbatim
Further instructions are included at the top of the file.

<center>
Back to \ref organization.  Forward to \ref geodesic.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page geodesic Geodesics on the Ellipsoid

<center>
Back to \ref transversemercator.  Forward to \ref geocentric.  Up to \ref contents.
</center>

GeographicLib::Geodesic and GeographicLib::GeodesicLine provide accurate
solutions to the direct and inverse geodesic problems.  The \ref geod
utility provides an interface to these classes.
GeographicLib::AzimuthalEquidistant implements the azimuthal equidistant
projection in terms of geodesics.  GeographicLib::CassiniSoldner
implements a transverse cylindrical equidistant projection in terms of
geodesics.  The \ref equidistanttest utility provides an interface to
these projections.

References
 - F. W. Bessel,
   <a href="http://adsabs.harvard.edu/abs/1825AN......4..241B">&Uuml;ber die
   Berechnung der geographischen L&auml;ngen und Breiten aus geod&auml;tischen
   Vermessungen</a>,
   Astron. Nachr. 4 (86), 241&ndash;254 (1826).  English translation:
   <a href="http://arxiv.org/abs/0908.1824">arXiv:0908.1824</a>.
 - F. R. Helmert,
   Die Mathematischen und Physikalischen Theorieen der H&ouml;heren
   Geod&auml;sie, vol. 1 (Teubner, Leipzig, 1880).
 - E. B. Christoffel,
   Allgemeine Theorie der geod&auml;tischen Dreiecke (1868),
   in "Gesammelte Mathematische Abhandlungen",
   vol. 1, chap. 16, pp. 297&ndash;346 (Teubner, Leipzig, 1910).
 - H. F. Rainsford,
   <a href="http://dx.doi.org/10.1007/BF02527187">
   Long geodesics on the ellipsoid</a>,
   Bull. Geod. 37 (1), 12&ndash;22 (1955).
 - T. Vincenty,
   <a href="http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf">Direct and Inverse
   Solutions of Geodesics on the Ellipsoid with Application of Nested
   Equations</a>,
   Survey Review 23 (176), 88&ndash;93 (1975).
 - A collection of some older papers on geodesics is available at
   http://trac.osgeo.org/proj/wiki/GeodesicCalculations#TheHistory

\section geoddesc Description of algorithm

The shortest path between two points on a ellipsoid at (\e lat1, \e lon1)
and (\e lat2, \e lon2) is called the geodesic.  Its length is \e s12 and
the geodesic from point 1 to point 2 has azimuths \e azi1 and \e azi2 at
the two end points.  (The azimuth is the heading measured clockwise from
north.  \e azi2 is the "forward" azimuth, i.e., the heading that takes
you beyond point 2 not back to point 1.)  The reduced length of the
geodesic, \e m12, is the rate at which the second point moves as the
geodesic is rotated about the first point.  Christoffel (1868) proved
that this is equal to the rate at which the first point moves when the
geodesic is rotated about the second point.

Given \e lat1, \e lon1, \e azi1, and \e s12, we can determine \e lat2,
\e lon2, \e azi2, \e m12.  This is the <b>direct</b> geodesic problem.
(If \e s12 is sufficiently large that the geodesic wraps more than
halfway around the earth, there will be another geodesic between the
points with a smaller \e s12.)

Given \e lat1, \e lon1, \e lat2, and \e lon2, we can determine \e azi1,
\e azi2, \e s12, \e m12.  This is the <b>inverse</b> geodesic problem.
Usually, the solution to the inverse problem is unique.  In cases where
there are multiple solutions (all with the same \e s12, of course), all
the solutions can be easily generated once a particular solution is
provided.

The framework for solving geodesic problems on the ellipsoid was laid
down by Bessel (1826) who showed how the problem may be transferred to
an "auxiliary sphere" where the latitude \e phi has been replaced by the
reduced latitude \e beta where tan(\e beta) = (1 - \e f) tan(\e phi).
On this sphere, the geodesic is a great circle and the azimuth is the
same as on the ellipsoid.  However, the ellipsoidal distance is related to
the great circle distance by an integral; and the ellipsoidal longitude
is similarly related to the longitude on the auxiliary sphere.  In the
case of small \e f, Bessel developed series expansions for the integrals
and provided a systematic solution to the direct problem.  Helmert
(1880) extended Bessel's treatment by giving an expression for the
reduced length of a geodesic for the ellipsoid.  The "azimuthal scale" of
the azimuthal equidistant projection about point 1 is given by \e s12/\e
m12.

The algorithms included here are based on the work of Bessel (1826) and
Helmert (1880).  Key points are:
  - Extension of Bessel's method for removing half the terms in the
    series expansions to the longitude integral.  This also accelerates
    the convergence of the series.
  - Inclusion of sufficient terms in the series to give accuracy at the
    round-off level for doubles and long doubles.
  - Reverting the distance series so that the direct problem can be
    solved non-iteratively.
  - Calculation of the reduced length for the geodesic.
  - Solution the inverse problem via Newton's method, using the reduced
    length to compute the needed derivative.
  .
Vincenty (1975) has provided algorithms for the direct and inverse
geodesic problems based in the series given by Rainsford (1955) (based,
in turn, on Bessel).  However Vincenty's methods were designed for use
on the desk calculators of that era and are not optimal (in terms of
accuracy and robustness) for a general purpose computer.  The
distinguishing features of the algorithms presented here compared to
Vincenty's are:
  - Accuracy to close to the round-off limit (i.e., 15 nm for doubles).
  - Complete solution of the inverse problem.  (Vincenty's inverse
    algorithm sometimes fails.)
  - Return the reduced length of the geodesic.

The series expansions for the integrals are obtained using <a
href="http://en.wikipedia.org/wiki/Maxima_(software)">Maxima</a>.  In
this release, we use a 6th-order expansions.  This is sufficient to
maintain accuracy for doubles for the SRMmax ellipsoid (\e a = 6400 km,
\e f = 1/150).  However, the preprocessor macro GEOD_ORD can be used to
select any order up to 8.  (If using long doubles, with a 64-bit
fraction, the default order is 7.)  The series is evaluated by a
combination of Horner's method and Clenshaw summation.  For the direct
problem, we use a reversion of the series for the distance to compute
the spherical arc length and thereby complete the solution without the
need to iterate.

The Maxima code, <a href="geod.mac">geod.mac</a>, used to derive the
series for the distance and longitude integrals.  In addition this
includes code to format the results for inclusion into C++ code.  You
will need to have Maxima installed to use this code.  The comments at
the top of <a href="geod.mac">geod.mac</a> illustrate how to run it.  It
takes about 10s to generate the 8th order series.

For the inverse problem, we rearrange the points so that the point 1 is
the one closest to a pole and is in the southern hemisphere and the
point 2 is to the north and east of point 1.  We consider geodesics
leaving point 1 with azimuth \e alpha1 in [0, pi] and we determine the
longitude where these geodesics first intersect the latitude = \e lat2.
The longitude is an increasing function of \e alpha1 and we use Newton's
method to determine the value of \e alpha1 for which the longitude
matches \e lon2.  This then gives the desired geodesic.

This class also returns the arc length \e a12 on the auxiliary sphere
and allows distances to be specified in these terms.  See the -a option
to \ref geod.

\section testgeod Test data for geodesics

A test set a geodesics is available at
 - <a href="http://sourceforge.net/projects/geographiclib/files/testdata/GeodTest.dat.gz/download">
   GeodTest.dat.gz</a>
 .
This is about 34 MB (compressed).  This consists of a set of geodesics
for the WGS84 ellipsoid.  A subset of this (consisting of 1/50 of the
members &mdash; about 690 kB, compressed) is available at
 - <a href="http://sourceforge.net/projects/geographiclib/files/testdata/GeodTest-short.dat.gz/download">
   GeodTest-short.dat.gz</a>

Each line of the test set gives 9 space delimited numbers
 - latitude for point 1, \e lat1 (degrees, exact)
 - longitude for point 1, \e lon1 (degrees, always 0)
 - azimuth for point 1, \e azi1 (clockwise from north in degrees, exact)
 - latitude for point 2, \e lat2 (degrees, accurate to 10<sup>-18</sup> deg)
 - longitude for point 2, \e lon2 (degrees, accurate to 10<sup>-18</sup> deg)
 - azimuth for point 2, \e azi2 (degrees, accurate to 10<sup>-18</sup> deg)
 - geodesic distance from point 1 to point 2, \e s12 (meters, exact)
 - arc distance on the auxiliary sphere, \e a12 (degrees, accurate to
   10<sup>-18</sup> deg)
 - reduced length of the geodesic, \e m12 (meters, accurate to 0.1 pm)
 .
These are computed using as direct geodesic calculations with the given
\e lat1, \e lon1, \e azi1, and \e s12.  The distance \e s12 always
corresponds to an arc length \e a12 <= 180<sup>o</sup>, so the given
geodesics give the shortest paths from point 1 to point 2.  For
simplicity and without loss of generality, \e lat1 is chosen in
[0<sup>o</sup>, 90<sup>o</sup>], \e lon1 is taken to be zero, \e azi1 is
chosen in [0<sup>o</sup>, 180<sup>o</sup>].  Furthermore, \e lat1 and \e
azi1 are taken to be multiples of 10<sup>-12</sup> deg and \e s12 is a
multiple of 0.1 um in [0 m, 20003931.4586254 m].  This results \e lon2
in [0<sup>o</sup>, 180<sup>o</sup>] and \e azi2 in [0<sup>o</sup>,
180<sup>o</sup>].

The direct calculation uses an expansion of the geodesic equations
accurate to \e f<sup>20</sup> (approximately 1 part in 10<sup>50</sup>)
and is computed with with
<a href="http://en.wikipedia.org/wiki/Maxima_(software)">Maxima</a>'s
bfloats and fpprec set to 100 (so the errors in the data are probably
1/2 of the values quoted above).

The contents of the file are as follows:
 - 100000 entries randomly distributed
 - 50000 entries which are nearly antipodal
 - 50000 entries with short distances
 - 50000 entries with one end near a pole
 - 50000 entries with both ends near opposite poles
 - 50000 entries which are nearly meridional
 - 50000 entries which are nearly equatorial
 - 50000 entries running between vertices (\e azi1 = \e azi2 = 90<sup>o</sup>)
 - 50000 entries ending close to vertices
 .
(a total of 500000 entries).  The values for \e s12 for the geodesics
running between vertices are truncated to a multiple of 0.1 pm and this
is used to determine point 2.

This data can be fed to the \ref geod utility as follows
 - Direct from point 1:
\verbatim
  gunzip -c GeodTest.dat.gz | cut -d' ' -f1,2,3,7 | ./Geod
\endverbatim
   This should yield columns 4, 5, 6, and 9 of the test set.
 - Direct from point 2:
\verbatim
  gunzip -c GeodTest.dat.gz | cut -d' ' -f4,5,6,7 |
  sed "s/ \([^ ]*$\)/ -\1/" | ./Geod
\endverbatim
   (The sed command negates the distance.)  This should yield columns 1,
   2, and 3, and the negative of column 9 of the test set.
 - Inverse between points 1 and 2:
\verbatim
  gunzip -c GeodTest.dat.gz | cut -d' ' -f1,2,4,5 | ./Geod -i
\endverbatim
   This should yield columns 3, 6, 7, and 9 of the test set.
 .
Add, e.g., "-p 6", to the call to Geod to change the precision of the
output.  Adding "-f" causes Geod to print all 9 fields specifying the
geodesic (in the same order as the test set).

\section geoderrors Accuracy of geodesic calculation

We regard all the test data as "exact".  For each member of the test
set, 6 error distances are computed.  (The direct problem is solved from
both ends and the maximum of the errors is used.)
 -# The error in the position of point 2 for the direct problem.
 -# Error in the direction of geodesic at point 2 for the direct
    problem scaled by the major radius.  (This is the direction in 3D
    space to allow canceling variations in longitude and azimuth near
    the poles.)
 -# Error in m12 for the direct problem.
 -# Error in s12 for the inverse problem.
 -# Error in the azimuths at points 1 and 2 for the inverse problem
    scaled by m12.
 -# Consistency of the azimuths at points 1 and 2 for the inverse
    problem.  Compute geodesic from each endpoint using the computed
    azimuths; compare positions on each geodesic at midpoint (for long
    geodesics) or a distance equal to the major radius beyond each end
    of the geodesic (for short geodesics).
 .
The last check verifies that \e azi1 and \e azi2 returned by the inverse
solution correspond to the same path and is important, e.g., when point
1 and point 2 are near opposite poles.  To guard against a canceling
error, the calculations in last error estimate use a long double
version of the direct geodesic calculation (which is about 2000 times
more accurate than the double version).  The maximum of the resulting
errors in less than 15 nm for the double version and 7 pm for the long
double version.

\section geodseries Expansions for geodesics

We give here the series expansions for the various geodesic integrals
valid to order <i>f</i><sup>8</sup>.

In the formulas below ^ indicates exponentiation (\e f^3 = \e f*\e f*\e
f) and / indicates real division (3/5 = 0.6).  The equations need to be
converted to Horner form, but are here left in expanded form so that
they can be easily truncated to lower order.  These expansions were
obtained using the the Maxima code, <a href="geod.mac">geod.mac</a>.

The series expanded to order
<i>f</i><sup>30</sup> are given in <a href="geodseries30.html">
geodseries30.html</a>.

In the expansions below, we have
 - \e alpha<sub>0</sub> is the azimuth at the equator crossing
 - \e lambda is the longitude measured from the equator crossing
 - \e omega is the spherical longitude
 - \e sigma is the spherical arc length
 - \e f is the flattening
 - \e e<sup>2</sup> = \e f (2 - \e f)
 - \e e'<sup>2</sup> = \e e<sup>2</sup>/(1 - \e e<sup>2</sup>)
 - \e k<sup>2</sup> = \e e'<sup>2</sup> cos<sup>2</sup> \e alpha<sub>0</sub>
   = 4 \e eps / (1 - \e eps)<sup>2</sup>
 - \e del = (\e f - \e eps) / (1 - \e eps)
 - \e nu = \e eps / \e del

The formula for distance is

&nbsp; &nbsp; \e s/\e b = \e I1(\e sigma)

where

&nbsp; &nbsp; \e I1(\e sigma) = \e A1 (\e sigma + \e B1(\e sigma))<br>
&nbsp; &nbsp; \e B1(\e sigma) =
sum<sub>\e j = 1</sub> \e C1<sub>j</sub> sin(2 \e j \e sigma)

and

\verbatim
A1 = (1 + 1/4 * eps^2
        + 1/64 * eps^4
        + 1/256 * eps^6
        + 25/16384 * eps^8) / (1 - eps);
\endverbatim

\verbatim
C1[1] = - 1/2 * eps
        + 3/16 * eps^3
        - 1/32 * eps^5
        + 19/2048 * eps^7;
C1[2] = - 1/16 * eps^2
        + 1/32 * eps^4
        - 9/2048 * eps^6
        + 7/4096 * eps^8;
C1[3] = - 1/48 * eps^3
        + 3/256 * eps^5
        - 3/2048 * eps^7;
C1[4] = - 5/512 * eps^4
        + 3/512 * eps^6
        - 11/16384 * eps^8;
C1[5] = - 7/1280 * eps^5
        + 7/2048 * eps^7;
C1[6] = - 7/2048 * eps^6
        + 9/4096 * eps^8;
C1[7] = - 33/14336 * eps^7;
C1[8] = - 429/262144 * eps^8;
\endverbatim

The function \e tau(\e sigma) = \e s/(\e b \e A1) = \e sigma + \e B1(\e
sigma) may be inverted by series reversion giving

&nbsp; &nbsp; \e sigma(\e tau) =
\e tau + sum<sub>\e j = 1</sub> \e C1'<sub>j</sub> sin(2 \e j \e tau)

where

\verbatim
C1'[1] = + 1/2 * eps
         - 9/32 * eps^3
         + 205/1536 * eps^5
         - 4879/73728 * eps^7;
C1'[2] = + 5/16 * eps^2
         - 37/96 * eps^4
         + 1335/4096 * eps^6
         - 86171/368640 * eps^8;
C1'[3] = + 29/96 * eps^3
         - 75/128 * eps^5
         + 2901/4096 * eps^7;
C1'[4] = + 539/1536 * eps^4
         - 2391/2560 * eps^6
         + 1082857/737280 * eps^8;
C1'[5] = + 3467/7680 * eps^5
         - 28223/18432 * eps^7;
C1'[6] = + 38081/61440 * eps^6
         - 733437/286720 * eps^8;
C1'[7] = + 459485/516096 * eps^7;
C1'[8] = + 109167851/82575360 * eps^8;
\endverbatim

The reduced length is given by

&nbsp; &nbsp; \e m/\e b =
sqrt(1 + \e k<sup>2</sup> sin<sup>2</sup>\e sigma<sub>2</sub>)
cos \e sigma<sub>1</sub> sin \e sigma<sub>2</sub><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -
sqrt(1 + \e k<sup>2</sup> sin<sup>2</sup>\e sigma<sub>1</sub>)
sin \e sigma<sub>1</sub> cos \e sigma<sub>2</sub><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -
cos \e sigma<sub>1</sub>  cos \e sigma<sub>2</sub>
(\e J(\e sigma<sub>2</sub>) - \e J(\e sigma<sub>1</sub>))

where

&nbsp; &nbsp; \e J(\e sigma) =
\e I1(\e sigma) - \e I2(\e sigma)<br>
&nbsp; &nbsp; \e I2(\e sigma) = \e A2 (\e sigma + \e B2(\e sigma))<br>
&nbsp; &nbsp; \e B2(\e sigma) =
sum<sub>\e j = 1</sub> \e C2<sub>j</sub> sin(2 \e j \e sigma)

\verbatim
A2 = (1 + 1/4 * eps^2
        + 9/64 * eps^4
        + 25/256 * eps^6
        + 1225/16384 * eps^8) * (1 - eps);
\endverbatim

\verbatim
C2[1] = + 1/2 * eps
        + 1/16 * eps^3
        + 1/32 * eps^5
        + 41/2048 * eps^7;
C2[2] = + 3/16 * eps^2
        + 1/32 * eps^4
        + 35/2048 * eps^6
        + 47/4096 * eps^8;
C2[3] = + 5/48 * eps^3
        + 5/256 * eps^5
        + 23/2048 * eps^7;
C2[4] = + 35/512 * eps^4
        + 7/512 * eps^6
        + 133/16384 * eps^8;
C2[5] = + 63/1280 * eps^5
        + 21/2048 * eps^7;
C2[6] = + 77/2048 * eps^6
        + 33/4096 * eps^8;
C2[7] = + 429/14336 * eps^7;
C2[8] = + 6435/262144 * eps^8;
\endverbatim

The longitude is given in terms of the spherical longitude by

&nbsp; &nbsp;
\e lambda = \e omega - \e f sin \e alpha<sub>0</sub> \e I3(\e sigma)

where

&nbsp; &nbsp; \e I3(\e sigma) = \e A3 (\e sigma + \e B3(\e sigma))<br>
&nbsp; &nbsp; \e B3(\e sigma) =
sum<sub>\e j = 1</sub> \e C3<sub>j</sub> sin(2 \e j \e sigma)

and

\verbatim
A3 = (2 - f) / (2 - del) * (1
        - 1/16 * nu^2 * del^3
        - 1/64 * nu^4 * del^4
        + 1/64 * nu^2 * del^5
        + (1/64 * nu^2 + 1/64 * nu^4 - 1/128 * nu^6) * del^6
        + (3/256 * nu^2 + 7/1024 * nu^4 + 15/2048 * nu^6) * del^7);
\endverbatim

\verbatim
C3[1] = + 1/4 * eps
        - 1/8 * eps*del
        - (1/16 + 1/64 * nu^2) * eps*del^2
        - (1/32 + 1/128 * nu^2) * eps*del^3
        - (1/64 - 1/128 * nu^2 + 1/128 * nu^4) * eps*del^4
        - (1/128 - 1/128 * nu^2 - 3/1024 * nu^4) * eps*del^5
        - (1/256 - 5/1024 * nu^2 - 5/1024 * nu^4 + 61/16384 * nu^6) * eps*del^6;
C3[2] = + 1/16 * eps^2
        - 3/64 * eps^2*del
        - (1/64 + 1/128 * nu^2) * eps^2*del^2
        - 1/256 * eps^2*del^3
        + (5/1024 * nu^2 - 7/2048 * nu^4) * eps^2*del^4
        + (1/1024 + 3/1024 * nu^2 + 37/16384 * nu^4) * eps^2*del^5;
C3[3] = + 5/192 * eps^3
        - 3/128 * eps^3*del
        - (1/192 + 7/1536 * nu^2) * eps^3*del^2
        + 1/768 * nu^2 * eps^3*del^3
        + (1/1024 + 35/12288 * nu^2 - 91/49152 * nu^4) * eps^3*del^4;
C3[4] = + 7/512 * eps^4
        - 7/512 * eps^4*del
        - (1/512 + 3/1024 * nu^2) * eps^4*del^2
        + (5/8192 + 23/16384 * nu^2) * eps^4*del^3;
C3[5] = + 21/2560 * eps^5
        - 9/1024 * eps^5*del
        - (3/4096 + 33/16384 * nu^2) * eps^5*del^2;
C3[6] = + 11/2048 * eps^6
        - 99/16384 * eps^6*del;
C3[7] = + 429/114688 * eps^7;
\endverbatim

\section geodmisc Miscellaneous information on geodesics

When either point is at a pole, the azimuth is defined by keeping the
longitude fixed and writing \e lat = 90 - \e eps or -90 + \e eps and
taking the limit \e eps -> 0 from above.

The following prescription allows you to ascertain when there are
multiple solutions to the inverse problem and to generate the complete
set.
 - \e lat1 = \e -lat2 (with neither at a pole).  If \e azi1 = \e azi2,
   the geodesic is unique.  Otherwise there are two geodesics and the
   second one is obtained by setting [\e azi1, \e azi2] = [\e azi2, \e
   azi1].  (This occurs when the longitude difference is near +/-
   180<sup>o</sup> for oblate ellipsoids.)
 - \e lon2 = \e lon1 +/- 180<sup>o</sup> (with neither at a pole).  If \e
   azi1 = 0<sup>o</sup> or +/- 180<sup>o</sup>, the geodesic is unique.
   Otherwise there are two geodesics and the second one is obtained by
   setting [\e azi1, \e azi2] = [-\e azi1, -\e azi2].  (This occurs when
   the \e lat2 is near -\e lat1 for prolate ellipsoids.)
 - Points 1 and 2 at opposite poles.  There are infinitely many
   geodesics which can be generated by setting [\e azi1, \e azi2] = [\e
   azi1, \e azi2] + [\e d, -\e d], for arbitrary \e d.  (For spheres,
   this prescription applies when points 1 and 2 are antipodal.)
 - \e s12 = 0 (coincident points).  There are infinitely many geodesics
   which can be generated by setting [\e azi1, \e azi2] = [\e azi1, \e
   azi2] + [\e d, \e d], for arbitrary \e d.

A rather large fraction of the code in GeographicLib::Geodesic deals
merely with the spherical trigonometry required to do great circle
calculations.  When high accuracy is required, care has to be taken to
use stable methods for computing angles.  Typically, we represent angles
internally with the pair [sin(\e theta), cos(\e theta)].  This expands
the number of representable angles by about 4; in particular, it allows
angles very close to all the cardinal points to be resolved.  We use
expressions for sin(\e theta) and cos(\e theta) which avoid large
cancellations.  Having a comprehensive test set as described in \ref
testgeod helps to identify problems.  This representation allows input
arguments which are multiples of 90<sup>o</sup> to be represented
exactly.

The code for the inverse treats equatorial and meridional geodesics
specially.  All other case are handled by the same code (implementing
Newton's method) with tests to select appropriate starting guess in
difference regimes.  Specifying a zero inverse flattening in Geodesic
constructor is equivalent to zero flattening (i.e., a sphere).  The
method accommodates this case without any special coding.

In order to limits the enumeration of cases, the inverse problem is
brought to a canonical form by interchanging the points and changing the
signs of the coordinates.  The effect of these changes are undone at the
end by applying sign changes to the final calls to atan2 to give the
azimuths.

The derivative needed for Newton's method for the inverse problem is
given in terms of the reduced length.  The reduced length can also be
used to apply Newton's method to solve problems such as finding the
distance between a point and a geodesic line.

Convergence failures with Newton's method for the inverse problem is
signaled by negating the distance (and the arc distance and reduced
length) and by reversing the azimuths.  This convention was chosen as it
allows both detection of the problem and subsequent use of the values
(assuming that they are approximately correct).  It is expected that the
method converges for all models of the earth and for any two input
points. Please report all cases where this does not happen.

Geographic coordinates which are close to zero are quantized (by adding
and subtracting 1/16 deg).  This allows certain cases of underflow to be
avoided.  This limits the accuracy to which coordinates can be specified
to 0.7 pm.  This should not be a problem since the overall accuracy of
the algorithms is only 15 nm.

You can specify a \e negative flattening to get a prolate ellipsoid.  The
rule is that \e b is the radius of the axis of symmetry (the polar
radius), that \e a is the equatorial radius, and that \e b = \e a (1 -
\e f).  The direct solution needed no modification.  The inverse
solution required a generalization in the way starting points for
Newton's method are chosen; in addition a test are added to the case
when the endpoints are on the same meridian to determine if a shorter
non-meridional geodesic exists.

Most planets and satellites are approximated by oblate ellipsoids.
However, satellites whose rotation frequency is tidally locked to a
month may be prolate (as example is Saturn's moon, Tethys).  Such
satellites are typically considerably more eccentric that the earth and
it may be necessary to increase the order of the series used in order to
maintain accuracy.

GeodesicLine::Position provides a way of doing a series of direct
calculations for a single geodesic.  This is about 2.1 times faster than
calling Geodesic::Direct.  A speed-up by a further factor of 1.6 is
obtained with the direct calculation if the distance is expressed in
terms of the spherical arc length.

On a 2.6 GHz Intel machine (g++, version 4.3.0, -O3), timings are as
follows:
 - Geodesic::Direct 0.93 us
 - GeodesicLine::Position 0.43 us (arcmode = false)
 - GeodesicLine::Position 0.27 us (arcmode = true)
 - Geodesic::Inverse 2.6 us
 .
The timing for Geodesic::Inverse is a mean.  Individual calls may take a
few times longer because of the need to do additional Newton iterations.
Mean number of Newton iterations is about 3, but this increases (rarely)
to 17 with some values of the arguments.

Future work:
 - More documentation.

<center>
Back to \ref transversemercator.  Forward to \ref geocentric.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page geocentric Geocentric coordinates

<center>
Back to \ref geodesic.  Forward to \ref geoid.  Up to \ref contents.
</center>

The implementation of GeographicLib::Geocentric::Reverse is adapted from
 - H. Vermeille,
   <a href="http://dx.doi.org/10.1007/s00190-002-0273-6">
   Direct transformation from geocentric coordinates to geodetic
   coordinates</a>, J. Geodesy 76, 451&ndash;454 (2002).

This provides a closed-form solution but can't directly be applied close to
the center of the earth.  Several changes have been made to remove this
restriction and to improve the numerical accuracy.  Now the method is
accurate for all inputs (even if \e h is infinite).

The problems encountered near the center of the ellipsoid are:
 - There's a potential division by zero in the definition of \e s. The
   equations are easily reformulated to avoid this problem.
 - \e t<sup>3</sup> may be negative.  This is OK; we just take the real root.
 - The solution for \e t may be complex.  However this leads to 3 real roots
   for \e u/\e r.  It's then just a matter of picking the one that computes
   the geodetic result which minimizes |\e h| and which avoids large
   round-off errors.
 - Some of the equations result in a large loss of accuracy due to
   subtracting nearly equal quantities.  E.g., \e k= sqrt(\e u + \e v + \e
   w<sup>2</sup>) - \e w is inaccurate if \e u + \e v is small; we can fix
   this by writing \e k = (\e u + \e v)/(sqrt(\e u + \e v + \e w<sup>2</sup>)
   + \e w).

The error is computed as follows.  Write a version of
Geocentric::WGS84.Forward which uses long doubles (including using long
doubles for the WGS84 parameters).  Generate random (long double) geodetic
coordinates (\e lat0, \e lon0, \e h0) and use the "long double"
WGS84.Forward to obtain the corresponding (long double) geocentric
coordinates (\e x0, \e y0, \e z0).  [We restrict \e h0 so that \e h0 >= - \e
a (1 - \e e<sup>2</sup>) / sqrt(1 - \e e<sup>2</sup> sin<sup>2</sup>\e
lat0), which ensures that (\e lat0, \e lon0, \e h0) is the principal
geodetic inverse of (\e x0, \e y0, \e z0).]  Because the forward calculation
is numerically stable and because long doubles (on Linux systems using g++)
provide 11 bits additional accuracy (about 3.3 decimal digits), we regard
this set of test data as exact.

Apply the double version of WGS84.Reverse to (\e x0, \e y0, \e z0) to
compute the approximate geodetic coordinates (\e lat1, \e lon1, \e h1).
Convert (\e lat1 - \e lat0, \e lon1 - \e lon0) to a distance, \e ds, on the
surface of the ellipsoid and define \e err = hypot(\e ds, \e h1 - \e h0).
For |\e h0| < 5000 km, we have \e err < 7 nm.

This methodology is not very useful very far from the globe, because the
absolute errors in the approximate geodetic height become large, or within
50 km of the center of the earth, because of errors in computing the
approximate geodetic latitude.  To illustrate the second issue, the maximum
value of \e err for \e h0 < 0 is about 80 mm.  The error is maximum close to
the circle given by geocentric coordinates satisfying hypot(\e x, \e y) = \e
a \e e<sup>2</sup> (= 42.7 km), \e z = 0.  (This is the center of meridional
curvature for \e lat = 0.)  The geodetic latitude for these points is \e lat
= 0.  However, if we move 1 nm towards the center of the earth, the geodetic
latitude becomes 0.04", a distance of 1.4 m from the equator.  If, instead,
we move 1 nm up, the geodetic latitude becomes 7.45", a distance of 229 m
from the equator.  In light of this, Reverse does quite well in this
vicinity.

To obtain a practical measure of the error for the general case we define
- <i>err</i><sub>h</sub> = |\e h1 - \e h0| / max(1, \e h0 / \e a)
- for \e h0 > 0, <i>err</i><sub>out</sub> = \e ds
- for \e h0 < 0, apply the long double version of WGS84.Forward to (\e lat1,
  \e lon1, \e h1) to give (\e x1, \e y1, \e z1) and compute
  <i>err</i><sub>in</sub> = hypot(\e x1 - \e x0, \e y1 - \e y0, \e z1 - \e
  z0).
.
We then find <i>err</i><sub>h</sub> < 8 nm, <i>err</i><sub>out</sub> < 4 nm,
and <i>err</i><sub>in</sub> < 7 nm.

The testing has been confined to the WGS84 ellipsoid.  The method will work
for all ellipsoids used in terrestrial geodesy.  However, the central region,
which leads to multiple real roots for the cubic equation in Reverse, pokes
outside the ellipsoid (at the poles) for ellipsoids with \e e > 1/sqrt(2).
Reverse has not been analysed for this case.  Similarly ellipsoids which are
very nearly spherical near yield inaccurate results due to underflow; in the
other hand, the case of the sphere, \e f = 0, is treated specially and gives
accurate results.

Other comparable methods are K. M. Borkowski,
<a href="http://dx.doi.org/10.1007/BF00643807"> Transformation
of geocentric to geodetic coordinates without approximations</a>,
Astrophys. Space Sci. 139, 1&ndash;4 (1987)
(<a href="http://dx.doi.org/10.1007/BF00656995"> erratum</a>)
and T. Fukushima,
<a href="http://dx.doi.org/10.1007/s001900050271"> Fast transform from
geocentric to geodetic coordinates</a>, J. Geodesy 73, 603&ndash;610 (2003).
However the choice of independent variables in these methods leads
to a loss of accuracy for points near the equatorial plane.

<center>
Back to \ref geodesic.  Forward to \ref geoid.  Up to \ref contents.

</center>
**********************************************************************/
/**
\page geoid Geoid height

<center>
Back to \ref geocentric.  Forward to \ref utilities.  Up to \ref contents.
</center>

The gravitational equipotential surface approximately coinciding with
mean sea level is called the geoid.  The GeographicLib::Geoid class
evaluates the height of the geoid above the WGS84 ellipsoid.  This can
be used to convert heights above mean sea level to heights above the
WGS84 ellipoid.  Because the normal to the ellipsoid differs from the
normal to the geoid (the direction of a plumb line) there is a slight
ambiguity in the measurement of heights; however for heights up to 10km
this ambiguity is only 1mm.

The geoid is usually approximated by an "earth gravity model".  The
models published by the NGA are:
- EGM84:
  http://earth-info.nga.mil/GandG/wgs84/gravitymod/wgs84_180/wgs84_180.html
- EGM96:
  http://earth-info.nga.mil/GandG/wgs84/gravitymod/egm96/egm96.html
- EGM2008:
  http://earth-info.nga.mil/GandG/wgs84/gravitymod/egm2008
.
GeographicLib::Geoid offers a uniform way to handle all 3 geoids at a
variety of grid resolutions.  (In contrast, the software tools that NGA
offers are different for each geoid, and the interpolation programs are
different for each grid resolution.  In addition these tools are written
in Fortran with is nowadays difficult to integrate with other software.)

Unlike other components of %GeographicLib, there is a appreciable error
in the results obtained (at best, the RMS error is 1mm).  However the
class provides methods to report the maximum and RMS errors in the
results.

The class also returns the gradient of the geoid.  This can be used to
estimate the direction of a plumb line relative to the WGS84 ellipsoid.

\section geoidinst Installing the datasets

The geoid heights are computed using interpolation into a rectangular
grid.  The grids are read from data files which have been are computed
using the NGA synthesis programs in the case of the EGM84 and EGM96
models and using the NGA binary gridded data files in the case of
EGM2008.  These data files are available for download:
- EGM84,    30' grid:
  <a href="http://sourceforge.net/projects/geographiclib/files/geoids-distrib/egm84-30.tar.bz2/download">tar.bz2</a>,
  <a href="http://sourceforge.net/projects/geographiclib/files/geoids-distrib/egm84-30.zip/download">zip</a>.
- EGM84,    15' grid:
  <a href="http://sourceforge.net/projects/geographiclib/files/geoids-distrib/egm84-15.tar.bz2/download">tar.bz2</a>,
  <a href="http://sourceforge.net/projects/geographiclib/files/geoids-distrib/egm84-15.zip/download">zip</a>.
- EGM96,    15' grid:
  <a href="http://sourceforge.net/projects/geographiclib/files/geoids-distrib/egm96-15.tar.bz2/download">tar.bz2</a>,
  <a href="http://sourceforge.net/projects/geographiclib/files/geoids-distrib/egm96-15.zip/download">zip</a>.
- EGM96,     5' grid:
  <a href="http://sourceforge.net/projects/geographiclib/files/geoids-distrib/egm96-5.tar.bz2/download">tar.bz2</a>,
  <a href="http://sourceforge.net/projects/geographiclib/files/geoids-distrib/egm96-5.zip/download">zip</a>.
- EGM2008,   5' grid:
  <a href="http://sourceforge.net/projects/geographiclib/files/geoids-distrib/egm2008-5.tar.bz2/download">tar.bz2</a>,
  <a href="http://sourceforge.net/projects/geographiclib/files/geoids-distrib/egm2008-5.zip/download">zip</a>.
- EGM2008, 2.5' grid:
  <a href="http://sourceforge.net/projects/geographiclib/files/geoids-distrib/egm2008-2_5.tar.bz2/download">tar.bz2</a>,
  <a href="http://sourceforge.net/projects/geographiclib/files/geoids-distrib/egm2008-2_5.zip/download">zip</a>.
- EGM2008,   1' grid:
  <a href="http://sourceforge.net/projects/geographiclib/files/geoids-distrib/egm2008-1.tar.bz2/download">tar.bz2</a>,
  <a href="http://sourceforge.net/projects/geographiclib/files/geoids-distrib/egm2008-1.zip/download">zip</a>.

Download \e either the tar.bz2 file \e or zip file (they have the same
contents).  If possible use the tar.bz2 format, since bzip2 compresses
these files about 2 times better than zip.  The data in tar and zip
files both unpack into a "geoids" directory and, for convenience, all
the data should be unpacked in the same parent directory.  For example
\verbatim
   mkdir -p /usr/local/share/GeographicLib
   tar xfjC egm96-5.tar.bz2 /usr/local/share/GeographicLib
   tar xfjC egm2008-2_5.tar.bz2 /usr/local/share/GeographicLib
   etc.
\endverbatim
or
\verbatim
   mkdir -p /usr/local/share/GeographicLib
   cd /usr/local/share/GeographicLib
   unzip ~-/egm96-5.zip
   unzip ~-/egm2008-2_5.zip
   etc.
\endverbatim
Geoid uses a compile time default (specified by the GEOID_DEFAULT_PATH
macro) to locate the datasets.  This is
- /usr/local/share/GeographicLib/geoids, for non-Windows systems
- C:/cygwin/usr/local/share/GeographicLib/geoids, for Windows systems
.
This may be overridden at run-time by defining the GEOID_PATH
environment variable.  Finally, the path may be set using the optional
second argument to the GeographicLib::Geoid::Geoid constructor.

The sizes of these datasets are
\verbatim
   name         geoid    grid           sizes (MB)
                                 tar.bz2    zip    disk
   egm84-30     EGM84    30'      0.5       0.5     0.5
   egm84-15     EGM84    15'      1.5       1.9     2.0
   egm96-15     EGM96    15'      1.5       1.9     2.0
   egm96-5      EGM96     5'      9.8        16      18
   egm2008-5    EGM2008   5'       10        16      18
   egm2008-2_5  EGM2008   2.5'     34        62      72
   egm2008-1    EGM2008   1'      155       372     445
\endverbatim
The final "disk" column is the size of the uncompressed data and it also
gives the memory requirements for caching the entire dataset using the
GeographicLib::Geoid::CacheAll method.

\section geoidformat The format of the geoid data files

The gridded data used by the GeographicLib::Geoid class is stored in
16-bit PGM files.  Thus the data for egm96-5 might be stored in the file
- /usr/local/share/GeographicLib/geoids/egm96-5.pgm
.
PGM simple graphic format with the following properties
- it is well documented
  <a href="http://netpbm.sourceforge.net/doc/pgm.html">here</a>;
- there are no separate "little-endian" and "big-endian" versions;
- it uses 1 or 2 bytes per pixel;
- pixels can be randomly accessed;
- comments can be added to the file header;
- it is sufficiently simple that it can be easily read without using the
  <a href="http://netpbm.sourceforge.net/doc/libnetpbm.html">libnetpbm</a>
  library (and thus we avoid adding a software dependency to
  %GeographicLib).
.
The major drawback of this format is that since there are only 65535
possible pixel values, the height must be quantized to 3mm.  However,
the resulting quantization error (up to 1.5mm) is typically smaller than
the linear interpolation errors.  The comments in the header for
egm96-5 are
\verbatim
   # Geoid file in PGM format for the GeographicLib::Geoid class
   # Description WGS84 EGM96, 5-minute grid
   # URL http://earth-info.nga.mil/GandG/wgs84/gravitymod/egm96/egm96.html
   # DateTime 2009-08-29 18:45:03
   # MaxBilinearError 0.140
   # RMSBilinearError 0.005
   # MaxCubicError 0.003
   # RMSCubicError 0.001
   # Offset -108
   # Scale 0.003
   # Origin 90N 0E
   # AREA_OR_POINT Point
   # Vertical_Datum WGS84
\endverbatim
Of these lines, the Scale and Offset lines are required and define the
conversion from pixel value to height (in meters) using \e height =
\e offset + \e scale \e pixel.  The Geoid constructor also reads the
Description, DataTime, and error lines (if present) and stores the
resulting data so that it can be returned by
GeographicLib::Geoid::Description, GeographicLib::Geoid::DateTime,
GeographicLib::Geoid::MaxError, and GeographicLib::Geoid::RMSError
methods.  The other lines serve as additional documentation but are not
used by this class.  Accompanying egm96-5.pgm (and similarly with the
other geoid data files) are two files egm96-5.wld and
egm96-5.pgm.aux.xml.  The first is an ESRI "world" file and the second
supplies complete projection metadata for use by
<a href="http://www.gdal.org">GDAL</a>.  Neither of these files is read
by GeographicLib::Geoid.

You can use gdal_translate to convert the data files to a standard
GeoTiff, e.g., with
\verbatim
   gdal_translate -ot Float32 -scale 0 65000 -108 87 egm96-5.pgm egm96-5.tif
\endverbatim
The arguments to -scale here are specific to the Offset and Scale
parameters used in the pgm file (note 65000 * 0.003 - 108 = 87).  You
can check these by running \ref geoideval with the "-v" option.

Finally, here is a sample script which uses GDAL to create a 1-degree
squared grid of geoid heights at 3&quot; resolution (matching DTED1) by
bilinear interpolation.
\verbatim
   #! /bin/sh
   lat=37
   lon=067
   res=3                           # resolution in seconds
   TEMP=`mktemp junkXXXXXXXXXX`    # temporary file for GDAL
   gdalwarp -q -te `echo $lon $lat $res | awk '{
       lon = $1; lat = $2; res = $3;
       printf "%.14f %.14f %.14f %.14f",
           lon  -0.5*res/3600, lat  -0.5*res/3600,
           lon+1+0.5*res/3600, lat+1+0.5*res/3600;
   }'` -ts $((3600/res+1)) $((3600/res+1)) -r bilinear egm96-5.tif $TEMP
   gdal_translate -quiet \
       -mo AREA_OR_POINT=Point \
       -mo Description="WGS84 EGM96, $res-second grid" \
       -mo Vertical_Datum=WGS84 \
       -mo Tie_Point_Location=pixel_corner \
       $TEMP e$lon-n$lat.tif
   rm -f $TEMP
\endverbatim

\section geoidinterp Interpolating the geoid data

GeographicLib::Geoid evaluates the geoid height is by bilinear or cubic
interpolation.  The gradient of the geoid height is obtained by
differentiating the interpolated height and referencing the result to
distance on the WGS84 ellipsoid.

The bilinear interpolation is based on the values at the 4 corners of
the enclosing cell.  The interpolated height is a continuous function of
position; however the gradient has discontinuities are cell boundaries.
The quantization of the data files exacerbates the errors in the
gradients.

The cubic interpolation is a least-squares fit to the values on a
12-point stencil with weights as follows:
\verbatim
   . 1 1 .
   1 2 2 1
   1 2 2 1
   . 1 1 .
\endverbatim
The cubic is constrained to be independent of longitude when evaluating
the height at one of the poles.  Cubic interpolation is considerably
more accurate than bilinear interpolation; however, in this
implementation there are small discontinuities in the heights are cell
boundaries.  The over-constrained cubic fit slightly reduces the
quantization errors on average.

The algorithm for the least squares fit is taken from, F. H. Lesh,
Multi-dimensional least-squares polynomial curve fitting, CACM 2, 29-30
(1959).  This algorithm is not part of Geographic::Geoid; instead it is
implemented as
<a href="http://en.wikipedia.org/wiki/Maxima_(software)">Maxima</a>
code which is used to precompute the matrices to convert the function
values on the stencil into the coefficients from the cubic polynomial.
This code is included as a comment in Geoid.cpp.

The interpolations methods are quick and give good accuracy.  Here is a
summary of the combined quantization and interpolation errors for the
heights.
\verbatim
                                  bilinear error    cubic error
   name         geoid    grid     max     rms       max     rms
   egm84-30     EGM84    30'      1.546m  70mm      0.274m  14mm
   egm84-15     EGM84    15'      0.413m  18mm      0.020m   1mm
   egm96-15     EGM96    15'      1.152m  40mm      0.169m   7mm
   egm96-5      EGM96     5'      0.140m   5mm      0.003m   1mm
   egm2008-5    EGM2008   5'      0.478m  12mm      0.294m   5mm
   egm2008-2_5  EGM2008   2.5'    0.135m   3mm      0.031m   1mm
   egm2008-1    EGM2008   1'      0.025m   1mm      0.003m   1mm
\endverbatim
The errors are with respect the the specific NGA earth gravity model
(not to any "real" geoid).  The RMS values are obtained using 5 million
uniformly distributed random points.  The maximum values are obtained by
evaluating the errors using a different grid with points at or near the
centers of the original grid.  (The RMS difference between EGM96 and
EGM2008 is about 0.5m.  The RMS difference between EGM84 and EGM96 is
about 1.5m.)

\section geoidcache Caching the geoid data

A simple way of calling Geoid is as follows
\verbatim
   #include "GeographicLib/Geoid.hpp"
   #include <iostream>
   ...
   GeographicLib::Geoid g("egm96-5");
   double lat, lon;
   while (std::cin >> lat >> lon)
      std::cout << g(lat, lon) << "\n";
   ...
\endverbatim

The first call to g(lat, lon) causes the data for the stencil points (4
points for bilinear interpolation and 12 for cubic interpolation) to be
read and the interpolated value returned.  A simple 0th-order caching
scheme is provided by default, so that, if the second and subsequent
points falls within the same grid cell, the data values are not reread
from the file.  This is adequate for most interactive use and also
minimizes disk accesses for the case when a continuous track is being
followed.

If a large quantity of geoid calculations are needed, the calculation
can be speeded up by preloading the data for a rectangular block with
GeographicLib::Geoid::CacheArea or the entire dataset with
GeographicLib::Geoid::CacheAll.  If the requested points lie within the
cached area, the cached data values are used; otherwise the data is read
from disk as before.  Caching all the data is a reasonable choice for
the 5' grids and coarser.  Caching all the data for the 1' grid will
require 0.5GB of RAM and should only be used on systems with sufficient
memory.

The use of caching does not affect the values returned.  Because
of the caching and the random file access, this class is \e not
thread safe; i.e., a single instantiation cannot be safely used
by multiple threads.  If multiple threads need to calculate
geoid heights they should all construct thread-local
instantiations.

\section testgeoid Test data for geoids

A test set for the geoid models is available at
 - <a href="http://sourceforge.net/projects/geographiclib/files/testdata/GeoidHeights.dat.gz/download">
   GeoidHeight.dat.gz</a>
 .
This is about 10 MB (compressed).  This test set consists of a set of
500000 geographic coordinates together with the corresponding geoid
heights according to various earth gravity models.

Each line of the test set gives 6 space delimited numbers
 - latitude (degrees, exact)
 - longitude (degrees, exact)
 - EGM84 height (meters, accurate to 1 mm)
 - EGM96 height (meters, accurate to 0.1 mm)
 - EGM2008 height (meters, accurate to 1 mm)
 .
The latitude and longitude are all multiples of 10<sup>-6</sup> deg and
should be regarded as exact.  The geoid heights are computed using the
harmonic NGA synthesis programs.  In the case of the EGM84 and EGM96,
the programs were compiled (with gfortran) and run under Linux.  In the
case of EGM2008, the prescription results in NaNs (possibly because of
uninitialized variables in the program?), so the data was generated with
the precompiled binary that NGA supplies for Windows.

<center>
Back to \ref geocentric.  Forward to \ref utilities.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page utilities Utility Programs

<center>
Back to \ref geocentric.  Forward to \ref old.  Up to \ref contents.
</center>

The examples of utility use here assume that the utilities have been
built and put in a directory in your PATH.

\section geoconvert GeoConvert

GeoConvert is a command line utility for geographic coordinate
conversions via GeographicLib::GeoCoords.  There is an online interface
to this utility at
http://geographiclib.sourceforge.net/cgi-bin/GeoConvert

Examples:
 - echo 33.3 44.4 | GeoConvert -u\n=> 38N 444141 368470
 - echo 33.3 44.4 | GeoConvert -m -p -3\n=> 38SMB4484

Here is the usage (obtained from "GeoConvert -h")
\verbatim
Usage: GeoConvert [-g|-d|-u|-m|-c] [-p prec] [-z zone] [-s] [-n] [-h]

Convert geographic coordinates to

    -g latitude and longitude (decimal degrees), default output
    -d latitude and longitude (degrees mins secs)
    -u UTM or UPS
    -m MGRS
    -c meridian convergence and scale

The WGS84 model of the earth is used.  Geographic coordinates are given on
standard input as:

Latitude and longitude (decimal degrees or degrees minutes seconds).  d,
', and " are used to denote degrees, minutes, and seconds, with the least
significant designator optional.  Latitude is given first unless a
hemisphere is specified, e.g., the following are all equivalent

    33.3 44.4
    E44.4 N33.3
    33d18'N 44d24'E
    44d24 33d18N

UTM or UPS given as zone+hemisphere easting northing or easting northing
zone+hemisphere.  The zone is absent for a UPS specification.  E.g.,

    38N 444140.54 3684706.36
    444140.54 3684706.36 38N
    S 2173854.98 2985980.58
    2173854.98 2985980.58 S

MRGS is used to specify the center of a grid square, e.g.,

    38SMB4484
    38SMB44140847064

-p prec (default 0) sets the precision relative to 1m.  This gives the
number of digits after the decimal point for UTM/UPS.  The number of digits
per coordinate for MGRS is 5 + prec.  For decimal degrees, the number of
digits after the decimal point is 5 + prec.  For DMS (degree, minute,
seconds) output, the number of digits after the decimal point in the
seconds components is 1 + prec; if this is negative then use minutes (prec
= -2 or -3) or degrees (prec <= -4) as the least significant component.
Print convergence, resp. scale, with 5 + prec, resp. 7 + prec, digits after
the decimal point.  The minimum value of prec is -5 and the maximum is 9
for UTM/UPS, 9 for decimal degrees, 10 for DMS, 6 for MGRS, and 8 for
convergence and scale.

MGRS coordinates are given by truncating (instead of rounding) the
coordinates to the requested precision.  For example is prec = -3, the
result is the 1km square enclosing the position, for example,

    echo 38N 444800 3684700 | GeoConvert -m -p -3   ==> 38SMB4484

If the -n option is given, then, on input, an MSGS coordinate refers to
the south-west corner of the MGRS square instead of the center.  Thus:

    echo 38SMB4484 | GeoConvert -u         ==> 38N 444500 3684500
    echo 38SMB4484 | GeoConvert -u -n      ==> 38N 444000 3684000

Convergence is the bearing of grid north given as degrees clockwise from
true north.

UTM/UPS and MGRS are given in zone of the input if applicable, otherwise in
the standard zone.

-z zone sets the zone for output.  Use either a positive number for a UTM
zone or zone = 0 to specify UPS.  Alternatively use a zone+hemisphere
designation (and the hemisphere is ignored).

-s uses the standard zone.

For example, the point

    79.9S 6.1E

corresponds to possible MGRS coordinates

    32CMS4324728161 (standard UTM zone = 32)
    31CEM6066227959 (neighboring UTM zone = 31)
      BBZ1945517770 (neighboring UPS zone)

then
    echo 79.9S 6.1E      | GeoConvert -p -3 -m       ==> 32CMS4328
    echo 31CEM6066227959 | GeoConvert -p -3 -m       ==> 31CEM6027
    echo 31CEM6066227959 | GeoConvert -p -3 -m -s    ==> 32CMS4328
    echo 31CEM6066227959 | GeoConvert -p -3 -m -z 0  ==>   BBZ1917

-h prints this help.
\endverbatim

\section geod Geod

Geod is a command line utility for geodesic calculations via
GeographicLib::Geodesic.  There is an online interface to this utility
at http://geographiclib.sourceforge.net/cgi-bin/Geod

Example (route from JFK Airport to Singapore Changi Airport)
 - echo "40d38'23N" "073d46'44W" "01d21'33N" "103d59'22E" |\n
   Geod -i -d -p 0\n
   => 003d18'29.9" 177d29'09.2" 15347628 4302458\n
   This returns the azimuths at the two end points, the distance, and
   the "reduced length".  The reduced length gives a measure of the
   sensitivity of the end point to errors in the initial azimuth.
 - for ((i = 0; i <= 16; i += 2)); do echo ${i}000000;done |\n
   Geod -l "40d38'23N" "073d46'44W" "003d18'29.9" -d -p 0\n
   => way points at intervals of 2000 km on route\n
   40d38'23.0&quot;N 073d46'44.0&quot;W 003d18'29.9&quot; 0\n
   58d34'45.1&quot;N 071d49'36.7&quot;W 004d48'48.8&quot; 1967419\n
   76d22'28.4&quot;N 065d32'17.8&quot;W 010d41'38.4&quot; 3743642\n
   84d50'28.0&quot;N 075d04'39.2&quot;E 150d55'00.9&quot; 5156905\n
   67d26'20.3&quot;N 098d00'51.2&quot;E 173d27'20.3&quot; 6070415\n
   49d33'03.2&quot;N 101d06'52.6&quot;E 176d07'54.3&quot; 6394568\n
   31d34'16.5&quot;N 102d30'46.3&quot;E 177d03'08.4&quot; 6095725\n
   13d31'56.0&quot;N 103d26'50.7&quot;E 177d24'55.0&quot; 5200700\n
   04d32'05.7&quot;S 104d14'48.7&quot;E 177d28'43.6&quot; 3795596

Here is the usage (obtained from "Geod -h")
\verbatim
Usage: Geod [-l lat1 lon1 azi1 | -i] [-a] [-n | -e a r]
            [-d] [-b] [-f] [-p prec] [-h]

Perform geodesic calculations.

The shortest path between two points on the ellipsoid at (lat1, lon1) and
(lat2, lon2) is called the geodesic.  Its length is s12 and the geodesic
from point 1 to point 2 has azimuths azi1 and azi2 at the two end
points.  The reduced length of the geodesic, m12, is defined such that
if the initial azimuth is perturbed by dazi1 (radians) then the second
point is displaced by m12*dazi1 in the direction perpendicular to the
geodesic.  On a flat surface, we have m12 = s12.

Geod operates in one of three modes:

(1) It accepts lines on the standard input containing "lat1 lon1 azi1
    s12" and prints "lat2 lon2 azi2 m12" on standard output.  This is
    the direct geodesic calculation.

(2) Command line arguments "-l lat1 lon1 azi1" specify a geodesic line.
    Geod then accepts a sequence of s12 values (one per line) on
    standard input and prints "lat2 lon2 azi2 m12" for each.  This
    generates a sequence of points on a single geodesic.

(3) With the -i command line argument, Geod performs the inverse
    geodesic calculation.  It reads lines containing "lat1 lon1 lat2
    lon2" and prints the corresponding values of "azi1 azi2 s12 m12".

By default, the WGS84 ellipsoid is used.  Specifying "-e a r" sets the
equatorial radius of the ellipsoid to "a" and the reciprocal flattening
to r.  Setting r = 0 results in a sphere.  Specify r < 0 for a prolate
ellipsoid.  The -n option uses the international ellipsoid (equivalent to
"-e 6378388 297").

Output of angles is as decimal degrees.  If -d is specified the output
is as degrees, minutes, seconds.  Input can be in either style.  d, ',
and " are used to denote degrees, minutes, and seconds, with the least
significant designator optional.  By default, latitude precedes
longitude for each point; however on input either may be given first by
appending N or S to the latitude and E or W to the longitude.  Azimuths
(measured clockwise from north) give the heading of the geodesic.  The
azimuth azi2 is the forward azimuth (the heading beyond point 2).  If
the -b flag is given, azi2 is converted to a back azimuth (the direction
back to point 1) for output.

s12 is given in meters, unless the -a flag is given.  In that case, s12
(on both input and output) are given as the arc length on the auxiliary
sphere a12 (measured in degrees).  In these terms, 180 degrees is the
distance from one equator crossing to the next or from the minimum
latitude to the maximum latitude.  Distances greater than 180 degrees do
not correspond to shortest paths.  m12 is always given in meters.

The output lines consist of the four quantities needed to complete the
specification of the geodesic.  With the -f option, each line of output
is a complete geodesic specification consisting of nine quantities

    lat1 lon1 azi1 lat2 lon2 azi2 s12 a12 m12

where here s12 is the distance and a12 the arc length.

-p prec (default 3) gives the precision of the output relative to 1m.
The minimum value of prec is 0 (1 m accuracy) and the maximum value is
10 (0.1 nm accuracy, but then the last digits are unreliable).

-h prints this help.
\endverbatim

\section transversemercatortest TransverseMercatorTest

TransverseMercatorTest is a command line utility for testing
GeographicLib::TransverseMercatorExact and
GeographicLib::TransverseMercator.

Examples:
 - echo 0 90 | TransverseMercatorTest\n=>
   0 90 25953592.84 9997964.94 90 18.40
 - echo 260e5 100e5 | TransverseMercatorTest -r\n=>
   -0.02 90.00 26000000 10000000 90.01 18.47

Note that, unlike \ref geoconvert, TransverseMercatorTest has no
no ability to change the precision of the output.

Here is the usage (obtained from "TranverseMercatorTest -h")
\verbatim
TransverseMercatorTest [-r] [-t|-s]

Convert between geographic coordinates and transverse Mercator coordinates.

Read lines with latitude and longitude (or easting and northing if -r is
specified) from standard input and print latitude, longitude, easting,
northing, convergence, and scale.  Units are degrees (or DMS) and meters.

By default, the WGS84 is ellipsoid is used, central meridian = 0, UTM
central scale (0.9996), and false easting and false northing are zero.

If -r is given, the reverse projection is performed (the inputs are easting
and northing).

If -s is given, the sixth-order Krueger series approximation to the
transverse Mercator projection is used instead of the exact projection.

If -t is specified, an ellipsoid of eccentricity 0.1 is used, central scale
= 1, 1/4 meridian distance = 1.  In addition, the cut in the exact
transverse Mercator projection at northing = 0 is removed.  The domain of
latitude (lat) and longitude (lon) is the union of
    lat in [0, 90]  and lon in [0, 90]
    lat in (-90, 0] and lon in [81, 90]
The domain of easting (x) and northing (x) is the union of
    x in [0, inf)       and y in [0, 1]
    x in [1.71..., inf) and y in (-inf, 0]

-s and -t are mutually exclusive (the last flag specified is the operative
one).

-h prints this help.
\endverbatim

\section cartconvert CartConvert

CartConvert is a command line utility for geodetic to cartesian
coordinate conversions via GeographicLib::Geocentric and
GeographicLib::LocalCartesian.

Examples:
 - echo 33.3 44.4 6000 | CartConvert\n=>
   3816209.60 3737108.55 3485109.57
 - echo 33.3 44.4 6000 | CartConvert -l 33 44 20\n=>
   37288.97 33374.29 5783.64
 - echo 30000 30000 0 | CartConvert -r\n=>
   6.483 45 -6335709.73

Note that, unlike \ref geoconvert, CartConvert has no
no ability to change the precision of the output.

Here is the usage (obtained from "CartConvert -h")
\verbatim
Usage: CartConvert [-r] [-l lat0 lon0 h0] [-h]

Convert geodetic coordinates to either geocentric or local cartesian
coordinates.  Geocentric coordinates have the origin at the center of the
earth, with the z axis going thru the north pole, and the x axis thru lat =
0, lon = 0.  By default, the conversion is to geocentric coordinates.
Specifying -l lat0 lon0 h0 causes a local coordinate system to be used with
the origin at latitude = lat0, longitude = lon0, height = h0, z normal to
the ellipsoid and y due north.

By default, the WGS84 ellipsoid is used.  Specifying "-e a r" sets the
equatorial radius of the ellipsoid to "a" and the reciprocal flattening
to r.  Setting r = 0 results in a sphere.  Specify r < 0 for a prolate
ellipsoid.

Geodetic coordinates are provided on standard input as a set of lines
containing (blank separated) latitude, longitude (degrees or DMS), and
height (meters).  For each set of geodetic coordinates, the corresponding
cartesian coordinates x, y, z (meters) are printed on standard output.

If -r is given the reverse transformation is performed.

-h prints this help
\endverbatim

\section equidistanttest EquidistantTest

EquidistantTest is a command line utility for performing azimuthal
equidistant and Cassini-Soldner projections using
GeographicLib::AzimuthalEquidistant and GeographicLib::CassiniSoldner.
These projections are both defined in terms of geodesics.

Examples (position of Caen in the Cassini-Soldner projection with origin
at the Paris Observatory)
 - echo 48.648 -2.007 | EquidistantTest -c 48.836 2.337\n=>
   -319919 -11791 86.7 0.999
 - echo -319919 -11791 | EquidistantTest -c 48.836 2.337 -r\n=>
   48.648 -2.007 86.7 0.999

Note that, unlike \ref geoconvert, EquidistantTest has no
no ability to change the precision of the output.

Here is the usage (obtained from "EquidistantTest -h")
\verbatim
Usage: EquidistantTest [-c lat0 lon0] [-z lat0 lon0] [-r] [-h]

Convert geodetic coordinates to either azimuthal equidistant or
Cassini-Soldner coordinates.  The center of the projection (lat0, lon0)
is specified by either the -c option (for Cassini-Soldner) or -z option
(for azimuthal equidistant).  At least one of these options must be
given (the last one given is used).  The WGS84 model of the earth is
used.

Geodetic coordinates are provided on standard input as a set of lines
containing (blank separated) latitude and longitude (degrees or DMS).
For each set of geodetic coordinates, the corresponding projected
coordinates x, y (meters) are printed on standard output together with
the azimuth azi (degrees) and reciprocal scale rk.  For Cassini-Soldner,
azi is the bearing of the easting direction and the scale in the
northing direction is 1/rk.  For azimuthal equidistant, azi is the
bearing of the radial direction and the scale in the azimuthal direction
is 1/rk

If -r is given the reverse transformation is performed.  x and y are
given on standard input and each line of the standard output gives
latitude, longitude, azi, and rk.

-h prints this help
\endverbatim

\section geoideval GeoidEval

Evaluate the height of the geoid by interpolating into a grid via
GeographicLib::Geoid.  There is an online interface to this utility
at http://geographiclib.sourceforge.net/cgi-bin/Geoid

Example: the height of the EGM96 geoid at Timbuktu
 - echo "16d46'33N" "3d00'34W" | GeoidEval\n=>
   28.7068 -0.02e-6 -1.73e-6
 .
The first number is the height of the geoid and the 2nd and 3rd are its
slopes in the northerly and easterly direction.

In addition, this utility requires the installation of the geoid data
files; see \ref geoidinst for details

Here is the usage (obtained from "GeoidEval -h")
\verbatim
Usage:
  GeoidEval [-n name] [-d dir] [-l] [-a] [-c south west north east] [-v] [-h]

Read in positions on standard input and print out the corresponding
geoid heights on standard output.  In addition print the northly and
easterly gradients of the geoid height (i.e., the rate at which the
geoid height changes per unit distance along the WGS84 ellipsoid in
the specified directions).

Positions are given as latitude and longitude, UTM/UPS, or MGRS, in
any of the formats accepted by GeoConvert.

By default the EGM96 geoid is used with a 5' grid.  This may be
overriden with the -n option.  The name specified should be one of

                                  bilinear error    cubic error
   name         geoid    grid     max     rms       max     rms
   egm84-30     EGM84    30'      1.546m  70mm      0.274m  14mm
   egm84-15     EGM84    15'      0.413m  18mm      0.020m   1mm
   egm96-15     EGM96    15'      1.152m  40mm      0.169m   7mm
   egm96-5      EGM96     5'      0.140m   5mm      0.003m   1mm
   egm2008-5    EGM2008   5'      0.478m  12mm      0.294m   5mm
   egm2008-2_5  EGM2008   2.5'    0.135m   3mm      0.031m   1mm
   egm2008-1    EGM2008   1'      0.025m   1mm      0.003m   1mm

(Some of the geoids may not be available.)  The errors listed here
are estimates of the quantization and interpolation errors in the
reported heights compared to the specified geoid.

Cubic interpolation is used to compute the geoid height unless
-l is specified in which case bilinear interpolation is used.
Cubic interpolation is more accurate; however it results in
small discontinuities in the returned height on cell boundaries.
The gradients are computed by differentiating the interpolated
results.

GeoidEval will load the geoid data from the directory specified by
the -d option.  If this is not provided, it will look up the value of
GEOID_PATH (currently UNDEFINED) in the environment.
If this is not defined, it will use the compile-time value of
/usr/local/share/GeographicLib/geoids.

By default, the data file is randomly read to compute the geoid
heights at the input positions.  Usually this is sufficient for
interactive use.  If many heights are to be computed, GeoidEval
allows a block of data to be read into memory and heights within the
corresponding rectangle can then be computed without any disk acces.
If -a is specified all the geoid data is read; in the case of
egm2008-1, this requires about 0.5 GB of RAM.  The -c option allows
a rectangle of data to be cached.  The evaluation of heights
outside the cached rectangle causes the necessary data to be read
from disk.

Regardless of whether any cache is requested (with the -a or -c
options), the data for the last grid cell in cached.  This allows
the geoid height along a continuous path to be returned with little
disk overhead.

The -v option causes the data about the current geoid to be printed
to standard error.

-h prints this help.
\endverbatim

<center>
Back to \ref geocentric.  Forward to \ref old.  Up to \ref contents.
</center>
**********************************************************************/
/**
\page old Old Versions

<center>
Back to \ref utilities.  Up to \ref contents.
</center>

List of versions in reverse chronological order together with a brief
list of changes.  (Note: Old versions of the library use a year-month
style of numbering.  Now, the library uses
<a href="http://www.gnu.org/software/libtool/manual/libtool.html#Versioning">
libtool's version numbering scheme</a> using an interface and revision
numbers.)

 - <a href="http://sourceforge.net/projects/geographiclib/files/distrib/geographiclib-1.2.tar.gz/download">1.2 (released 2010-05-21)</a>
  - FIX BUGS in GeographicLib::Geodesic,
    - wrong azimuth returned by Direct if point 2 is on a pole;
    - Inverse sometimes fails with very close points.
  - Improve calculation of scale in GeographicLib::CassiniSoldner,
    - add GeographicLib::GeodesicLine::Scale,
      GeographicLib::GeodesicLine::EquatorialAzimuth, and
      GeographicLib::GeodesicLine::EquatorialArc;
    - break friend connection between CassiniSoldner and Geodesic.
  - Add GeographicLib::DMS::DecodeAngle and
    GeographicLib::DMS::DecodeAzimuth.  Extend
    GeographicLib::DMS::Decode and GeographicLib::DMS::Encode to deal
    with distances.
  - Code and documentation changes in GeographicLib::Geodesic and
    GeographicLib::Geocentric for consistency with
    the forthcoming paper on geodesics.
  - Increase order of series using in GeographicLib::Geodesic to 6 (full
    accuracy maintained for ellipsoid flattening < 0.01).
  - Macro __NO_LONG_DOUBLE_MATH to disable use of long double.
  - Correct declaration of GeographicLib::Math::isfinite to return a bool.
  - Changes in the \ref utilities,
    - improve error reporting when parsing command line arguments;
    - accept latitudes and longitudes in decimal degrees or degrees,
      minutes, and seconds, with optional hemisphere designators;
    - \ref geoconvert -z accepts zone or zone+hemisphere;
    - \ref geoideval accepts any of the input formats used by \ref geoconvert;
    - \ref cartconvert allows the ellipsoid to be specified with -e.

 - <a  href="http://sourceforge.net/projects/geographiclib/files/distrib/geographiclib-1.1.tar.gz/download">1.1 (released 2010-02-09)</a>
  - FIX BUG (introduced in 2009-03) in EllipticFunction::E(sn,cn,dn).
  - Increase accuracy of scale calculation in TransverseMercator and
    TransverseMercatorExact.
  - Code and documentation changes for consistency with
    <a  href="http://arxiv.org/abs/1002.1417">arXiv:1002.1417</a>

 - <a  href="http://sourceforge.net/projects/geographiclib/files/distrib/geographiclib-1.0.tar.gz/download">
   1.0 (released 2010-01-07)</a>
  - Add autoconf configuration files.
  - BUG FIX: Improve initial guess for Newton's method in
    PolarStereographic::Reverse.  (Previously this failed to converge
    when the co-latitude exceeded about 130 deg.)
  - Constructors for TransverseMercator, TransverseMercatorExact,
    PolarStereographic, Geocentric, and Geodesic now check for obvious
    problems with their arguments and throw an exception if necessary.
  - Most classes now include inspector functions such as MajorRadius()
    so that you can determine how instances were constructed.
  - Add GeographicLib::LambertConformalConic class.
  - Add GeographicLib::PolarStereographic::SetScale to allow the
    latitude of true scale to be specified.
  - Add solution and project files for Visual Studio 2008.
  - Add GeographicLib::GeographicErr for exceptions.
  - GeographicLib::Geoid changes:
    - BUG FIX: fix typo in GeographicLib::Geoid::Cache which could cause
      a segmentation fault in some cases when the cached area spanned
      the prime meridian.
    - Include sufficient edge data to allow heights to be returned for
      cached area without disk reads;
    - Add inspector functions to query the extent of the cache.

 - <a href="http://sourceforge.net/projects/geographiclib/files/distrib/Geographic-2009-11.tgz/download">2009-11</a>
  - Allow specification of "closest UTM zone" in GeographicLib::UTMUPS
    and \ref geoconvert (via -t option).
  - Utilities now complain is there are too many tokens on input lines.
  - Include real-to-real versions of GeographicLib::DMS::Decode and
    GeographicLib::DMS::Encode.
  - More house-cleaning changes:
    - Ensure that functions which return results through reference
      arguments do not alter the arguments when an exception is thrown.
    - Improve accuracy of GeographicLib::MGRS::Forward.
    - Include more information in some error messages.
    - Improve accuracy of inverse hypobolic functions.
    - Fix the way GeographicLib::Math functions handle different precisions.

 - <a href="http://sourceforge.net/projects/geographiclib/files/distrib/Geographic-2009-10.tgz/download">2009-10</a>
  - Change web site to http://geographiclib.sourceforge.net
  - Several house-cleaning changes:
    - Change from the a flat directory structure to a more easily
      maintained one.
    - Introduce Math class for common mathematical functions (in
      Constants.hpp).
    - Use Math::real as the type for all real quantities.  By default this
      is typedefed to double; and the library should be installed this
      way.
    - Eliminate const reference members of AzimuthalEquidistant,
      CassiniSoldner and LocalCartesian so that they may be copied.
    - Make several constructors explicit.  Disallow some constructors.
      Disallow copy constructor/assignment for Geoid.
    - Document least square formulas in Geoid.cpp.
    - Use unsigned long long for files positions of geoid files in Geoid.
    - Introduce optional mgrslimits argument in UTMUPS::Forward and
      UTMUPS::Reverse to enforce stricter MGRS limits on eastings and
      northings.
    - Add 64-bit targets in Visual Studio project files.

 - <a href="http://sourceforge.net/projects/geographiclib/files/distrib/Geographic-2009-09.tgz/download">2009-09</a>
  - Add GeographicLib::Geoid and \ref geoideval utility.

 - <a href="http://sourceforge.net/projects/geographiclib/files/distrib/Geographic-2009-08.tgz/download">2009-08</a>
  - Add GeographicLib::CassiniSoldner class and \ref equidistanttest utility.
  - Fix bug in GeographicLib::Geodesic::Inverse where NaNs were
    sometimes returned.
  - INCOMPATIBLE CHANGE: AzimuthalEquidistant now returns the reciprocal
    of the azimuthal scale instead of the reduced length.
  - Add -n option to \ref geoconvert.

 - <a href="http://sourceforge.net/projects/geographiclib/files/distrib/Geographic-2009-07.tgz/download">2009-07</a>
  - Speed up the series inversion code in tmseries.mac and geod.mac.
  - Reference Borkowski in section on \ref geocentric.

 - <a href="http://sourceforge.net/projects/geographiclib/files/distrib/Geographic-2009-06.tgz/download">2009-06</a>
  - Add routines to decode and encode zone+hemisphere to GeographicLib::UTMUPS.
  - Clean up code in GeographicLib::Geodesic.

 - <a href="http://sourceforge.net/projects/geographiclib/files/distrib/Geographic-2009-05.tgz/download">2009-05</a>
  - Improvements to GeographicLib::Geodesic:
    - more economical series expansions,
    - return reduced length (as does the \ref geod utility),
    - improved calculation of starting point for inverse method,
    - use reduced length to give derivative for Newton's method.
  - Add GeographicLib::AzimuthalEquidistant class.
  - Make GeographicLib::Geocentric, GeographicLib::TransverseMercator,
    and GeographicLib::PolarStereographic classes work with prolate
    ellipsoids.
  - \ref cartconvert checks its inputs more carefully.
  - Remove reference to defunct Constants.cpp from GeographicLib.vcproj.

 - <a href="http://sourceforge.net/projects/geographiclib/files/distrib/Geographic-2009-04.tgz/download">2009-04</a>
  - Use compile-time constants to select the order of series in
    GeographicLib::TransverseMercator.
  - 2x unroll of Clenshaw summation to avoid data shuffling.
  - Simplification of GeographicLib::EllipticFunction::E.
  - Use STATIC_ASSERT for compile-time checking of constants.
  - Improvements to GeographicLib::Geodesic:
    - compile-time option to change order of series used,
    - post Maxima code for generating the series,
    - tune the order of series for double,
    - improvements in the selection of starting points for Newton's
      method,
    - accept and return spherical arc lengths,
    - works with both oblate and prolate ellipsoids,
    - add -a, -e, -b options to the \ref geod utility.

 - <a href="http://sourceforge.net/projects/geographiclib/files/distrib/Geographic-2009-03.tgz/download">2009-03</a>
  - Add GeographicLib::Geodesic and the \ref geod utility.
  - Declare when no exceptions are thrown by functions.
  - Minor changes to GeographicLib::DMS class.
  - Use invf = 0 to mean a sphere in constructors to some classes.
  - The makefile creates a library and includes an install target.
  - Rename GeographicLib::ECEF to GeographicLib::Geocentric, ECEFConvert
    to \ref cartconvert.
  - Use inline functions to define constant doubles in Constants.hpp.

 - <a href="http://sourceforge.net/projects/geographiclib/files/distrib/Geographic-2009-02.tgz/download">2009-02</a>
  - Fix documentation of constructors (flattening -> inverse
    flattening).
  - Use std versions of math functions.
  - Add GeographicLib::ECEF and GeographicLib::LocalCartesian classes
    and the ECEFConvert utility.
  - Gather the documentation on the utility programs onto one page.

 - <a href="http://sourceforge.net/projects/geographiclib/files/distrib/Geographic-2009-01.tgz/download">2009-01</a>
  - First proper release of library.
  - More robust GeographicLib::TransverseMercatorExact:
    - Introduce \e extendp version of constructor,
    - Test against extended test data,
    - Optimize starting positions for Newton's method,
    - Fix behavior near all singularities,
    - Fix order dependence in C++ start-up code,
    - Improved method of computing scale and convergence.
  - Documentation on transverse Mercator projection.
  - Add GeographicLib::MGRS, GeographicLib::UTMUPS, etc.

 - 2008-09
  - Ad hoc posting of information on the transverse Mercator projection.

<center>
Back to \ref utilities.  Up to \ref contents.
</center>
**********************************************************************/
